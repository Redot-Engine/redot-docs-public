:github_url: hide

.. DO NOT EDIT THIS FILE!!!
.. Generated automatically from Redot engine sources.
.. Generator: https://github.com/redot-engine/redot/tree/3.6/doc/tools/make_rst.py.
.. XML source: https://github.com/redot-engine/redot/tree/3.6/doc/classes/Material3D.xml.

.. _class_Material3D:

Material3D
==========

**Inherits:** :ref:`Material<class_Material>` **<** :ref:`Resource<class_Resource>` **<** :ref:`Reference<class_Reference>` **<** :ref:`Object<class_Object>`

**Inherited By:** :ref:`ORMSpatialMaterial<class_ORMSpatialMaterial>`, :ref:`SpatialMaterial<class_SpatialMaterial>`

.. container:: contribute

	There is currently no description for this class. Please help us by :ref:`contributing one <doc_updating_the_class_reference>`!

.. rst-class:: classref-reftable-group

Properties
----------

.. table::
   :widths: auto

   +-----------------------------------------------------------+-------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`Color<class_Color>`                                 | :ref:`albedo_color<class_Material3D_property_albedo_color>`                                     | ``Color( 1, 1, 1, 1 )`` |
   +-----------------------------------------------------------+-------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`Texture<class_Texture>`                             | :ref:`albedo_texture<class_Material3D_property_albedo_texture>`                                 |                         |
   +-----------------------------------------------------------+-------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`float<class_float>`                                 | :ref:`anisotropy<class_Material3D_property_anisotropy>`                                         |                         |
   +-----------------------------------------------------------+-------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`bool<class_bool>`                                   | :ref:`anisotropy_enabled<class_Material3D_property_anisotropy_enabled>`                         | ``false``               |
   +-----------------------------------------------------------+-------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`Texture<class_Texture>`                             | :ref:`anisotropy_flowmap<class_Material3D_property_anisotropy_flowmap>`                         |                         |
   +-----------------------------------------------------------+-------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`bool<class_bool>`                                   | :ref:`ao_enabled<class_Material3D_property_ao_enabled>`                                         | ``false``               |
   +-----------------------------------------------------------+-------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`float<class_float>`                                 | :ref:`ao_light_affect<class_Material3D_property_ao_light_affect>`                               |                         |
   +-----------------------------------------------------------+-------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`bool<class_bool>`                                   | :ref:`ao_on_uv2<class_Material3D_property_ao_on_uv2>`                                           |                         |
   +-----------------------------------------------------------+-------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`Texture<class_Texture>`                             | :ref:`ao_texture<class_Material3D_property_ao_texture>`                                         |                         |
   +-----------------------------------------------------------+-------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`TextureChannel<enum_Material3D_TextureChannel>`     | :ref:`ao_texture_channel<class_Material3D_property_ao_texture_channel>`                         |                         |
   +-----------------------------------------------------------+-------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`AsyncMode<enum_Material3D_AsyncMode>`               | :ref:`async_mode<class_Material3D_property_async_mode>`                                         | ``0``                   |
   +-----------------------------------------------------------+-------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`float<class_float>`                                 | :ref:`clearcoat<class_Material3D_property_clearcoat>`                                           |                         |
   +-----------------------------------------------------------+-------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`bool<class_bool>`                                   | :ref:`clearcoat_enabled<class_Material3D_property_clearcoat_enabled>`                           | ``false``               |
   +-----------------------------------------------------------+-------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`float<class_float>`                                 | :ref:`clearcoat_gloss<class_Material3D_property_clearcoat_gloss>`                               |                         |
   +-----------------------------------------------------------+-------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`Texture<class_Texture>`                             | :ref:`clearcoat_texture<class_Material3D_property_clearcoat_texture>`                           |                         |
   +-----------------------------------------------------------+-------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`bool<class_bool>`                                   | :ref:`depth_deep_parallax<class_Material3D_property_depth_deep_parallax>`                       |                         |
   +-----------------------------------------------------------+-------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`bool<class_bool>`                                   | :ref:`depth_enabled<class_Material3D_property_depth_enabled>`                                   | ``false``               |
   +-----------------------------------------------------------+-------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`bool<class_bool>`                                   | :ref:`depth_flip_binormal<class_Material3D_property_depth_flip_binormal>`                       |                         |
   +-----------------------------------------------------------+-------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`bool<class_bool>`                                   | :ref:`depth_flip_tangent<class_Material3D_property_depth_flip_tangent>`                         |                         |
   +-----------------------------------------------------------+-------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`int<class_int>`                                     | :ref:`depth_max_layers<class_Material3D_property_depth_max_layers>`                             |                         |
   +-----------------------------------------------------------+-------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`int<class_int>`                                     | :ref:`depth_min_layers<class_Material3D_property_depth_min_layers>`                             |                         |
   +-----------------------------------------------------------+-------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`float<class_float>`                                 | :ref:`depth_scale<class_Material3D_property_depth_scale>`                                       |                         |
   +-----------------------------------------------------------+-------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`Texture<class_Texture>`                             | :ref:`depth_texture<class_Material3D_property_depth_texture>`                                   |                         |
   +-----------------------------------------------------------+-------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`Texture<class_Texture>`                             | :ref:`detail_albedo<class_Material3D_property_detail_albedo>`                                   |                         |
   +-----------------------------------------------------------+-------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`BlendMode<enum_Material3D_BlendMode>`               | :ref:`detail_blend_mode<class_Material3D_property_detail_blend_mode>`                           |                         |
   +-----------------------------------------------------------+-------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`bool<class_bool>`                                   | :ref:`detail_enabled<class_Material3D_property_detail_enabled>`                                 | ``false``               |
   +-----------------------------------------------------------+-------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`Texture<class_Texture>`                             | :ref:`detail_mask<class_Material3D_property_detail_mask>`                                       |                         |
   +-----------------------------------------------------------+-------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`Texture<class_Texture>`                             | :ref:`detail_normal<class_Material3D_property_detail_normal>`                                   |                         |
   +-----------------------------------------------------------+-------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`DetailUV<enum_Material3D_DetailUV>`                 | :ref:`detail_uv_layer<class_Material3D_property_detail_uv_layer>`                               |                         |
   +-----------------------------------------------------------+-------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`float<class_float>`                                 | :ref:`distance_fade_max_distance<class_Material3D_property_distance_fade_max_distance>`         |                         |
   +-----------------------------------------------------------+-------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`float<class_float>`                                 | :ref:`distance_fade_min_distance<class_Material3D_property_distance_fade_min_distance>`         |                         |
   +-----------------------------------------------------------+-------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`DistanceFadeMode<enum_Material3D_DistanceFadeMode>` | :ref:`distance_fade_mode<class_Material3D_property_distance_fade_mode>`                         | ``0``                   |
   +-----------------------------------------------------------+-------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`Color<class_Color>`                                 | :ref:`emission<class_Material3D_property_emission>`                                             |                         |
   +-----------------------------------------------------------+-------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`bool<class_bool>`                                   | :ref:`emission_enabled<class_Material3D_property_emission_enabled>`                             | ``false``               |
   +-----------------------------------------------------------+-------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`float<class_float>`                                 | :ref:`emission_energy<class_Material3D_property_emission_energy>`                               |                         |
   +-----------------------------------------------------------+-------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`bool<class_bool>`                                   | :ref:`emission_on_uv2<class_Material3D_property_emission_on_uv2>`                               |                         |
   +-----------------------------------------------------------+-------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`EmissionOperator<enum_Material3D_EmissionOperator>` | :ref:`emission_operator<class_Material3D_property_emission_operator>`                           |                         |
   +-----------------------------------------------------------+-------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`Texture<class_Texture>`                             | :ref:`emission_texture<class_Material3D_property_emission_texture>`                             |                         |
   +-----------------------------------------------------------+-------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`bool<class_bool>`                                   | :ref:`flags_albedo_tex_force_srgb<class_Material3D_property_flags_albedo_tex_force_srgb>`       | ``false``               |
   +-----------------------------------------------------------+-------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`bool<class_bool>`                                   | :ref:`flags_albedo_tex_msdf<class_Material3D_property_flags_albedo_tex_msdf>`                   | ``false``               |
   +-----------------------------------------------------------+-------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`bool<class_bool>`                                   | :ref:`flags_disable_ambient_light<class_Material3D_property_flags_disable_ambient_light>`       | ``false``               |
   +-----------------------------------------------------------+-------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`bool<class_bool>`                                   | :ref:`flags_do_not_receive_shadows<class_Material3D_property_flags_do_not_receive_shadows>`     | ``false``               |
   +-----------------------------------------------------------+-------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`bool<class_bool>`                                   | :ref:`flags_ensure_correct_normals<class_Material3D_property_flags_ensure_correct_normals>`     | ``false``               |
   +-----------------------------------------------------------+-------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`bool<class_bool>`                                   | :ref:`flags_fixed_size<class_Material3D_property_flags_fixed_size>`                             | ``false``               |
   +-----------------------------------------------------------+-------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`bool<class_bool>`                                   | :ref:`flags_no_depth_test<class_Material3D_property_flags_no_depth_test>`                       | ``false``               |
   +-----------------------------------------------------------+-------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`bool<class_bool>`                                   | :ref:`flags_transparent<class_Material3D_property_flags_transparent>`                           | ``false``               |
   +-----------------------------------------------------------+-------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`bool<class_bool>`                                   | :ref:`flags_unshaded<class_Material3D_property_flags_unshaded>`                                 | ``false``               |
   +-----------------------------------------------------------+-------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`bool<class_bool>`                                   | :ref:`flags_use_point_size<class_Material3D_property_flags_use_point_size>`                     | ``false``               |
   +-----------------------------------------------------------+-------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`bool<class_bool>`                                   | :ref:`flags_use_shadow_to_opacity<class_Material3D_property_flags_use_shadow_to_opacity>`       | ``false``               |
   +-----------------------------------------------------------+-------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`bool<class_bool>`                                   | :ref:`flags_vertex_lighting<class_Material3D_property_flags_vertex_lighting>`                   | ``false``               |
   +-----------------------------------------------------------+-------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`bool<class_bool>`                                   | :ref:`flags_world_triplanar<class_Material3D_property_flags_world_triplanar>`                   | ``false``               |
   +-----------------------------------------------------------+-------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`float<class_float>`                                 | :ref:`metallic<class_Material3D_property_metallic>`                                             | ``0.0``                 |
   +-----------------------------------------------------------+-------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`float<class_float>`                                 | :ref:`metallic_specular<class_Material3D_property_metallic_specular>`                           | ``0.5``                 |
   +-----------------------------------------------------------+-------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`Texture<class_Texture>`                             | :ref:`metallic_texture<class_Material3D_property_metallic_texture>`                             |                         |
   +-----------------------------------------------------------+-------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`TextureChannel<enum_Material3D_TextureChannel>`     | :ref:`metallic_texture_channel<class_Material3D_property_metallic_texture_channel>`             | ``0``                   |
   +-----------------------------------------------------------+-------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`bool<class_bool>`                                   | :ref:`normal_enabled<class_Material3D_property_normal_enabled>`                                 | ``false``               |
   +-----------------------------------------------------------+-------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`float<class_float>`                                 | :ref:`normal_scale<class_Material3D_property_normal_scale>`                                     |                         |
   +-----------------------------------------------------------+-------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`Texture<class_Texture>`                             | :ref:`normal_texture<class_Material3D_property_normal_texture>`                                 |                         |
   +-----------------------------------------------------------+-------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`Texture<class_Texture>`                             | :ref:`orm_texture<class_Material3D_property_orm_texture>`                                       |                         |
   +-----------------------------------------------------------+-------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`float<class_float>`                                 | :ref:`params_alpha_scissor_threshold<class_Material3D_property_params_alpha_scissor_threshold>` |                         |
   +-----------------------------------------------------------+-------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`bool<class_bool>`                                   | :ref:`params_billboard_keep_scale<class_Material3D_property_params_billboard_keep_scale>`       | ``false``               |
   +-----------------------------------------------------------+-------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`BillboardMode<enum_Material3D_BillboardMode>`       | :ref:`params_billboard_mode<class_Material3D_property_params_billboard_mode>`                   | ``0``                   |
   +-----------------------------------------------------------+-------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`BlendMode<enum_Material3D_BlendMode>`               | :ref:`params_blend_mode<class_Material3D_property_params_blend_mode>`                           | ``0``                   |
   +-----------------------------------------------------------+-------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`CullMode<enum_Material3D_CullMode>`                 | :ref:`params_cull_mode<class_Material3D_property_params_cull_mode>`                             | ``0``                   |
   +-----------------------------------------------------------+-------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`DepthDrawMode<enum_Material3D_DepthDrawMode>`       | :ref:`params_depth_draw_mode<class_Material3D_property_params_depth_draw_mode>`                 | ``0``                   |
   +-----------------------------------------------------------+-------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`DiffuseMode<enum_Material3D_DiffuseMode>`           | :ref:`params_diffuse_mode<class_Material3D_property_params_diffuse_mode>`                       | ``0``                   |
   +-----------------------------------------------------------+-------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`bool<class_bool>`                                   | :ref:`params_grow<class_Material3D_property_params_grow>`                                       | ``false``               |
   +-----------------------------------------------------------+-------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`float<class_float>`                                 | :ref:`params_grow_amount<class_Material3D_property_params_grow_amount>`                         |                         |
   +-----------------------------------------------------------+-------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`float<class_float>`                                 | :ref:`params_line_width<class_Material3D_property_params_line_width>`                           | ``1.0``                 |
   +-----------------------------------------------------------+-------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`float<class_float>`                                 | :ref:`params_point_size<class_Material3D_property_params_point_size>`                           | ``1.0``                 |
   +-----------------------------------------------------------+-------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`SpecularMode<enum_Material3D_SpecularMode>`         | :ref:`params_specular_mode<class_Material3D_property_params_specular_mode>`                     | ``0``                   |
   +-----------------------------------------------------------+-------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`bool<class_bool>`                                   | :ref:`params_use_alpha_scissor<class_Material3D_property_params_use_alpha_scissor>`             | ``false``               |
   +-----------------------------------------------------------+-------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`int<class_int>`                                     | :ref:`particles_anim_h_frames<class_Material3D_property_particles_anim_h_frames>`               |                         |
   +-----------------------------------------------------------+-------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`bool<class_bool>`                                   | :ref:`particles_anim_loop<class_Material3D_property_particles_anim_loop>`                       |                         |
   +-----------------------------------------------------------+-------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`int<class_int>`                                     | :ref:`particles_anim_v_frames<class_Material3D_property_particles_anim_v_frames>`               |                         |
   +-----------------------------------------------------------+-------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`float<class_float>`                                 | :ref:`proximity_fade_distance<class_Material3D_property_proximity_fade_distance>`               |                         |
   +-----------------------------------------------------------+-------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`bool<class_bool>`                                   | :ref:`proximity_fade_enable<class_Material3D_property_proximity_fade_enable>`                   | ``false``               |
   +-----------------------------------------------------------+-------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`bool<class_bool>`                                   | :ref:`refraction_enabled<class_Material3D_property_refraction_enabled>`                         | ``false``               |
   +-----------------------------------------------------------+-------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`float<class_float>`                                 | :ref:`refraction_scale<class_Material3D_property_refraction_scale>`                             |                         |
   +-----------------------------------------------------------+-------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`Texture<class_Texture>`                             | :ref:`refraction_texture<class_Material3D_property_refraction_texture>`                         |                         |
   +-----------------------------------------------------------+-------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`TextureChannel<enum_Material3D_TextureChannel>`     | :ref:`refraction_texture_channel<class_Material3D_property_refraction_texture_channel>`         |                         |
   +-----------------------------------------------------------+-------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`float<class_float>`                                 | :ref:`rim<class_Material3D_property_rim>`                                                       |                         |
   +-----------------------------------------------------------+-------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`bool<class_bool>`                                   | :ref:`rim_enabled<class_Material3D_property_rim_enabled>`                                       | ``false``               |
   +-----------------------------------------------------------+-------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`Texture<class_Texture>`                             | :ref:`rim_texture<class_Material3D_property_rim_texture>`                                       |                         |
   +-----------------------------------------------------------+-------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`float<class_float>`                                 | :ref:`rim_tint<class_Material3D_property_rim_tint>`                                             |                         |
   +-----------------------------------------------------------+-------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`float<class_float>`                                 | :ref:`roughness<class_Material3D_property_roughness>`                                           | ``1.0``                 |
   +-----------------------------------------------------------+-------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`Texture<class_Texture>`                             | :ref:`roughness_texture<class_Material3D_property_roughness_texture>`                           |                         |
   +-----------------------------------------------------------+-------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`TextureChannel<enum_Material3D_TextureChannel>`     | :ref:`roughness_texture_channel<class_Material3D_property_roughness_texture_channel>`           | ``0``                   |
   +-----------------------------------------------------------+-------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`bool<class_bool>`                                   | :ref:`subsurf_scatter_enabled<class_Material3D_property_subsurf_scatter_enabled>`               | ``false``               |
   +-----------------------------------------------------------+-------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`float<class_float>`                                 | :ref:`subsurf_scatter_strength<class_Material3D_property_subsurf_scatter_strength>`             |                         |
   +-----------------------------------------------------------+-------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`Texture<class_Texture>`                             | :ref:`subsurf_scatter_texture<class_Material3D_property_subsurf_scatter_texture>`               |                         |
   +-----------------------------------------------------------+-------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`Color<class_Color>`                                 | :ref:`transmission<class_Material3D_property_transmission>`                                     |                         |
   +-----------------------------------------------------------+-------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`bool<class_bool>`                                   | :ref:`transmission_enabled<class_Material3D_property_transmission_enabled>`                     | ``false``               |
   +-----------------------------------------------------------+-------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`Texture<class_Texture>`                             | :ref:`transmission_texture<class_Material3D_property_transmission_texture>`                     |                         |
   +-----------------------------------------------------------+-------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`Vector3<class_Vector3>`                             | :ref:`uv1_offset<class_Material3D_property_uv1_offset>`                                         | ``Vector3( 0, 0, 0 )``  |
   +-----------------------------------------------------------+-------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`Vector3<class_Vector3>`                             | :ref:`uv1_scale<class_Material3D_property_uv1_scale>`                                           | ``Vector3( 1, 1, 1 )``  |
   +-----------------------------------------------------------+-------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`bool<class_bool>`                                   | :ref:`uv1_triplanar<class_Material3D_property_uv1_triplanar>`                                   | ``false``               |
   +-----------------------------------------------------------+-------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`float<class_float>`                                 | :ref:`uv1_triplanar_sharpness<class_Material3D_property_uv1_triplanar_sharpness>`               |                         |
   +-----------------------------------------------------------+-------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`Vector3<class_Vector3>`                             | :ref:`uv2_offset<class_Material3D_property_uv2_offset>`                                         | ``Vector3( 0, 0, 0 )``  |
   +-----------------------------------------------------------+-------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`Vector3<class_Vector3>`                             | :ref:`uv2_scale<class_Material3D_property_uv2_scale>`                                           | ``Vector3( 1, 1, 1 )``  |
   +-----------------------------------------------------------+-------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`bool<class_bool>`                                   | :ref:`uv2_triplanar<class_Material3D_property_uv2_triplanar>`                                   | ``false``               |
   +-----------------------------------------------------------+-------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`float<class_float>`                                 | :ref:`uv2_triplanar_sharpness<class_Material3D_property_uv2_triplanar_sharpness>`               |                         |
   +-----------------------------------------------------------+-------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`bool<class_bool>`                                   | :ref:`vertex_color_is_srgb<class_Material3D_property_vertex_color_is_srgb>`                     | ``false``               |
   +-----------------------------------------------------------+-------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`bool<class_bool>`                                   | :ref:`vertex_color_use_as_albedo<class_Material3D_property_vertex_color_use_as_albedo>`         | ``false``               |
   +-----------------------------------------------------------+-------------------------------------------------------------------------------------------------+-------------------------+

.. rst-class:: classref-reftable-group

Methods
-------

.. table::
   :widths: auto

   +-------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>`       | :ref:`get_feature<class_Material3D_method_get_feature>` **(** :ref:`Feature<enum_Material3D_Feature>` feature **)** |const|                                        |
   +-------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>`       | :ref:`get_flag<class_Material3D_method_get_flag>` **(** :ref:`Flags<enum_Material3D_Flags>` flag **)** |const|                                                     |
   +-------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`Texture<class_Texture>` | :ref:`get_texture<class_Material3D_method_get_texture>` **(** :ref:`TextureParam<enum_Material3D_TextureParam>` param **)** |const|                                |
   +-------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                          | :ref:`set_feature<class_Material3D_method_set_feature>` **(** :ref:`Feature<enum_Material3D_Feature>` feature, :ref:`bool<class_bool>` enable **)**                |
   +-------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                          | :ref:`set_flag<class_Material3D_method_set_flag>` **(** :ref:`Flags<enum_Material3D_Flags>` flag, :ref:`bool<class_bool>` enable **)**                             |
   +-------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                          | :ref:`set_texture<class_Material3D_method_set_texture>` **(** :ref:`TextureParam<enum_Material3D_TextureParam>` param, :ref:`Texture<class_Texture>` texture **)** |
   +-------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------+

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

Enumerations
------------

.. _enum_Material3D_TextureParam:

.. rst-class:: classref-enumeration

enum **TextureParam**:

.. _class_Material3D_constant_TEXTURE_ALBEDO:

.. rst-class:: classref-enumeration-constant

:ref:`TextureParam<enum_Material3D_TextureParam>` **TEXTURE_ALBEDO** = ``0``

Texture specifying per-pixel color.

.. _class_Material3D_constant_TEXTURE_METALLIC:

.. rst-class:: classref-enumeration-constant

:ref:`TextureParam<enum_Material3D_TextureParam>` **TEXTURE_METALLIC** = ``1``

Texture specifying per-pixel metallic value.

.. _class_Material3D_constant_TEXTURE_ROUGHNESS:

.. rst-class:: classref-enumeration-constant

:ref:`TextureParam<enum_Material3D_TextureParam>` **TEXTURE_ROUGHNESS** = ``2``

Texture specifying per-pixel roughness value.

.. _class_Material3D_constant_TEXTURE_EMISSION:

.. rst-class:: classref-enumeration-constant

:ref:`TextureParam<enum_Material3D_TextureParam>` **TEXTURE_EMISSION** = ``3``

Texture specifying per-pixel emission color.

.. _class_Material3D_constant_TEXTURE_NORMAL:

.. rst-class:: classref-enumeration-constant

:ref:`TextureParam<enum_Material3D_TextureParam>` **TEXTURE_NORMAL** = ``4``

Texture specifying per-pixel normal vector.

.. _class_Material3D_constant_TEXTURE_RIM:

.. rst-class:: classref-enumeration-constant

:ref:`TextureParam<enum_Material3D_TextureParam>` **TEXTURE_RIM** = ``5``

Texture specifying per-pixel rim value.

.. _class_Material3D_constant_TEXTURE_CLEARCOAT:

.. rst-class:: classref-enumeration-constant

:ref:`TextureParam<enum_Material3D_TextureParam>` **TEXTURE_CLEARCOAT** = ``6``

Texture specifying per-pixel clearcoat value.

.. _class_Material3D_constant_TEXTURE_FLOWMAP:

.. rst-class:: classref-enumeration-constant

:ref:`TextureParam<enum_Material3D_TextureParam>` **TEXTURE_FLOWMAP** = ``7``

Texture specifying per-pixel flowmap direction for use with :ref:`anisotropy<class_Material3D_property_anisotropy>`.

.. _class_Material3D_constant_TEXTURE_AMBIENT_OCCLUSION:

.. rst-class:: classref-enumeration-constant

:ref:`TextureParam<enum_Material3D_TextureParam>` **TEXTURE_AMBIENT_OCCLUSION** = ``8``

Texture specifying per-pixel ambient occlusion value.

.. _class_Material3D_constant_TEXTURE_DEPTH:

.. rst-class:: classref-enumeration-constant

:ref:`TextureParam<enum_Material3D_TextureParam>` **TEXTURE_DEPTH** = ``9``

Texture specifying per-pixel depth.

.. _class_Material3D_constant_TEXTURE_SUBSURFACE_SCATTERING:

.. rst-class:: classref-enumeration-constant

:ref:`TextureParam<enum_Material3D_TextureParam>` **TEXTURE_SUBSURFACE_SCATTERING** = ``10``

Texture specifying per-pixel subsurface scattering.

.. _class_Material3D_constant_TEXTURE_TRANSMISSION:

.. rst-class:: classref-enumeration-constant

:ref:`TextureParam<enum_Material3D_TextureParam>` **TEXTURE_TRANSMISSION** = ``11``

Texture specifying per-pixel transmission color.

.. _class_Material3D_constant_TEXTURE_REFRACTION:

.. rst-class:: classref-enumeration-constant

:ref:`TextureParam<enum_Material3D_TextureParam>` **TEXTURE_REFRACTION** = ``12``

Texture specifying per-pixel refraction strength.

.. _class_Material3D_constant_TEXTURE_DETAIL_MASK:

.. rst-class:: classref-enumeration-constant

:ref:`TextureParam<enum_Material3D_TextureParam>` **TEXTURE_DETAIL_MASK** = ``13``

Texture specifying per-pixel detail mask blending value.

.. _class_Material3D_constant_TEXTURE_DETAIL_ALBEDO:

.. rst-class:: classref-enumeration-constant

:ref:`TextureParam<enum_Material3D_TextureParam>` **TEXTURE_DETAIL_ALBEDO** = ``14``

Texture specifying per-pixel detail color.

.. _class_Material3D_constant_TEXTURE_DETAIL_NORMAL:

.. rst-class:: classref-enumeration-constant

:ref:`TextureParam<enum_Material3D_TextureParam>` **TEXTURE_DETAIL_NORMAL** = ``15``

Texture specifying per-pixel detail normal.

.. _class_Material3D_constant_TEXTURE_MAX:

.. rst-class:: classref-enumeration-constant

:ref:`TextureParam<enum_Material3D_TextureParam>` **TEXTURE_MAX** = ``17``

Represents the size of the :ref:`TextureParam<enum_Material3D_TextureParam>` enum.

.. rst-class:: classref-item-separator

----

.. _enum_Material3D_DetailUV:

.. rst-class:: classref-enumeration

enum **DetailUV**:

.. _class_Material3D_constant_DETAIL_UV_1:

.. rst-class:: classref-enumeration-constant

:ref:`DetailUV<enum_Material3D_DetailUV>` **DETAIL_UV_1** = ``0``

Use ``UV`` with the detail texture.

.. _class_Material3D_constant_DETAIL_UV_2:

.. rst-class:: classref-enumeration-constant

:ref:`DetailUV<enum_Material3D_DetailUV>` **DETAIL_UV_2** = ``1``

Use ``UV2`` with the detail texture.

.. rst-class:: classref-item-separator

----

.. _enum_Material3D_Feature:

.. rst-class:: classref-enumeration

enum **Feature**:

.. _class_Material3D_constant_FEATURE_TRANSPARENT:

.. rst-class:: classref-enumeration-constant

:ref:`Feature<enum_Material3D_Feature>` **FEATURE_TRANSPARENT** = ``0``

Constant for setting :ref:`flags_transparent<class_Material3D_property_flags_transparent>`.

.. _class_Material3D_constant_FEATURE_EMISSION:

.. rst-class:: classref-enumeration-constant

:ref:`Feature<enum_Material3D_Feature>` **FEATURE_EMISSION** = ``1``

Constant for setting :ref:`emission_enabled<class_Material3D_property_emission_enabled>`.

.. _class_Material3D_constant_FEATURE_NORMAL_MAPPING:

.. rst-class:: classref-enumeration-constant

:ref:`Feature<enum_Material3D_Feature>` **FEATURE_NORMAL_MAPPING** = ``2``

Constant for setting :ref:`normal_enabled<class_Material3D_property_normal_enabled>`.

.. _class_Material3D_constant_FEATURE_RIM:

.. rst-class:: classref-enumeration-constant

:ref:`Feature<enum_Material3D_Feature>` **FEATURE_RIM** = ``3``

Constant for setting :ref:`rim_enabled<class_Material3D_property_rim_enabled>`.

.. _class_Material3D_constant_FEATURE_CLEARCOAT:

.. rst-class:: classref-enumeration-constant

:ref:`Feature<enum_Material3D_Feature>` **FEATURE_CLEARCOAT** = ``4``

Constant for setting :ref:`clearcoat_enabled<class_Material3D_property_clearcoat_enabled>`.

.. _class_Material3D_constant_FEATURE_ANISOTROPY:

.. rst-class:: classref-enumeration-constant

:ref:`Feature<enum_Material3D_Feature>` **FEATURE_ANISOTROPY** = ``5``

Constant for setting :ref:`anisotropy_enabled<class_Material3D_property_anisotropy_enabled>`.

.. _class_Material3D_constant_FEATURE_AMBIENT_OCCLUSION:

.. rst-class:: classref-enumeration-constant

:ref:`Feature<enum_Material3D_Feature>` **FEATURE_AMBIENT_OCCLUSION** = ``6``

Constant for setting :ref:`ao_enabled<class_Material3D_property_ao_enabled>`.

.. _class_Material3D_constant_FEATURE_DEPTH_MAPPING:

.. rst-class:: classref-enumeration-constant

:ref:`Feature<enum_Material3D_Feature>` **FEATURE_DEPTH_MAPPING** = ``7``

Constant for setting :ref:`depth_enabled<class_Material3D_property_depth_enabled>`.

.. _class_Material3D_constant_FEATURE_SUBSURACE_SCATTERING:

.. rst-class:: classref-enumeration-constant

:ref:`Feature<enum_Material3D_Feature>` **FEATURE_SUBSURACE_SCATTERING** = ``8``

Constant for setting :ref:`subsurf_scatter_enabled<class_Material3D_property_subsurf_scatter_enabled>`.

.. _class_Material3D_constant_FEATURE_TRANSMISSION:

.. rst-class:: classref-enumeration-constant

:ref:`Feature<enum_Material3D_Feature>` **FEATURE_TRANSMISSION** = ``9``

Constant for setting :ref:`transmission_enabled<class_Material3D_property_transmission_enabled>`.

.. _class_Material3D_constant_FEATURE_REFRACTION:

.. rst-class:: classref-enumeration-constant

:ref:`Feature<enum_Material3D_Feature>` **FEATURE_REFRACTION** = ``10``

Constant for setting :ref:`refraction_enabled<class_Material3D_property_refraction_enabled>`.

.. _class_Material3D_constant_FEATURE_DETAIL:

.. rst-class:: classref-enumeration-constant

:ref:`Feature<enum_Material3D_Feature>` **FEATURE_DETAIL** = ``11``

Constant for setting :ref:`detail_enabled<class_Material3D_property_detail_enabled>`.

.. _class_Material3D_constant_FEATURE_MAX:

.. rst-class:: classref-enumeration-constant

:ref:`Feature<enum_Material3D_Feature>` **FEATURE_MAX** = ``12``

Represents the size of the :ref:`Feature<enum_Material3D_Feature>` enum.

.. rst-class:: classref-item-separator

----

.. _enum_Material3D_BlendMode:

.. rst-class:: classref-enumeration

enum **BlendMode**:

.. _class_Material3D_constant_BLEND_MODE_MIX:

.. rst-class:: classref-enumeration-constant

:ref:`BlendMode<enum_Material3D_BlendMode>` **BLEND_MODE_MIX** = ``0``

Default blend mode. The color of the object is blended over the background based on the object's alpha value.

.. _class_Material3D_constant_BLEND_MODE_ADD:

.. rst-class:: classref-enumeration-constant

:ref:`BlendMode<enum_Material3D_BlendMode>` **BLEND_MODE_ADD** = ``1``

The color of the object is added to the background.

.. _class_Material3D_constant_BLEND_MODE_SUB:

.. rst-class:: classref-enumeration-constant

:ref:`BlendMode<enum_Material3D_BlendMode>` **BLEND_MODE_SUB** = ``2``

The color of the object is subtracted from the background.

.. _class_Material3D_constant_BLEND_MODE_MUL:

.. rst-class:: classref-enumeration-constant

:ref:`BlendMode<enum_Material3D_BlendMode>` **BLEND_MODE_MUL** = ``3``

The color of the object is multiplied by the background.

.. rst-class:: classref-item-separator

----

.. _enum_Material3D_DepthDrawMode:

.. rst-class:: classref-enumeration

enum **DepthDrawMode**:

.. _class_Material3D_constant_DEPTH_DRAW_OPAQUE_ONLY:

.. rst-class:: classref-enumeration-constant

:ref:`DepthDrawMode<enum_Material3D_DepthDrawMode>` **DEPTH_DRAW_OPAQUE_ONLY** = ``0``

Default depth draw mode. Depth is drawn only for opaque objects.

.. _class_Material3D_constant_DEPTH_DRAW_ALWAYS:

.. rst-class:: classref-enumeration-constant

:ref:`DepthDrawMode<enum_Material3D_DepthDrawMode>` **DEPTH_DRAW_ALWAYS** = ``1``

Depth draw is calculated for both opaque and transparent objects.

.. _class_Material3D_constant_DEPTH_DRAW_DISABLED:

.. rst-class:: classref-enumeration-constant

:ref:`DepthDrawMode<enum_Material3D_DepthDrawMode>` **DEPTH_DRAW_DISABLED** = ``2``

No depth draw.

.. _class_Material3D_constant_DEPTH_DRAW_ALPHA_OPAQUE_PREPASS:

.. rst-class:: classref-enumeration-constant

:ref:`DepthDrawMode<enum_Material3D_DepthDrawMode>` **DEPTH_DRAW_ALPHA_OPAQUE_PREPASS** = ``3``

For transparent objects, an opaque pass is made first with the opaque parts, then transparency is drawn.

.. rst-class:: classref-item-separator

----

.. _enum_Material3D_CullMode:

.. rst-class:: classref-enumeration

enum **CullMode**:

.. _class_Material3D_constant_CULL_BACK:

.. rst-class:: classref-enumeration-constant

:ref:`CullMode<enum_Material3D_CullMode>` **CULL_BACK** = ``0``

Default cull mode. The back of the object is culled when not visible.

.. _class_Material3D_constant_CULL_FRONT:

.. rst-class:: classref-enumeration-constant

:ref:`CullMode<enum_Material3D_CullMode>` **CULL_FRONT** = ``1``

The front of the object is culled when not visible.

.. _class_Material3D_constant_CULL_DISABLED:

.. rst-class:: classref-enumeration-constant

:ref:`CullMode<enum_Material3D_CullMode>` **CULL_DISABLED** = ``2``

No culling is performed.

.. rst-class:: classref-item-separator

----

.. _enum_Material3D_Flags:

.. rst-class:: classref-enumeration

enum **Flags**:

.. _class_Material3D_constant_FLAG_UNSHADED:

.. rst-class:: classref-enumeration-constant

:ref:`Flags<enum_Material3D_Flags>` **FLAG_UNSHADED** = ``0``

No lighting is used on the object. Color comes directly from ``ALBEDO``.

.. _class_Material3D_constant_FLAG_USE_VERTEX_LIGHTING:

.. rst-class:: classref-enumeration-constant

:ref:`Flags<enum_Material3D_Flags>` **FLAG_USE_VERTEX_LIGHTING** = ``1``

Lighting is calculated per-vertex rather than per-pixel. This can be used to increase the speed of the shader at the cost of quality.

.. _class_Material3D_constant_FLAG_DISABLE_DEPTH_TEST:

.. rst-class:: classref-enumeration-constant

:ref:`Flags<enum_Material3D_Flags>` **FLAG_DISABLE_DEPTH_TEST** = ``2``

Disables the depth test, so this object is drawn on top of all others. However, objects drawn after it in the draw order may cover it.

.. _class_Material3D_constant_FLAG_ALBEDO_FROM_VERTEX_COLOR:

.. rst-class:: classref-enumeration-constant

:ref:`Flags<enum_Material3D_Flags>` **FLAG_ALBEDO_FROM_VERTEX_COLOR** = ``3``

Set ``ALBEDO`` to the per-vertex color specified in the mesh.

.. _class_Material3D_constant_FLAG_SRGB_VERTEX_COLOR:

.. rst-class:: classref-enumeration-constant

:ref:`Flags<enum_Material3D_Flags>` **FLAG_SRGB_VERTEX_COLOR** = ``4``

Vertex color is in sRGB space and needs to be converted to linear. Only applies in the GLES3 renderer.

.. _class_Material3D_constant_FLAG_USE_POINT_SIZE:

.. rst-class:: classref-enumeration-constant

:ref:`Flags<enum_Material3D_Flags>` **FLAG_USE_POINT_SIZE** = ``5``

Uses point size to alter the size of primitive points. Also changes the albedo texture lookup to use ``POINT_COORD`` instead of ``UV``.

.. _class_Material3D_constant_FLAG_FIXED_SIZE:

.. rst-class:: classref-enumeration-constant

:ref:`Flags<enum_Material3D_Flags>` **FLAG_FIXED_SIZE** = ``6``

Object is scaled by depth so that it always appears the same size on screen.

.. _class_Material3D_constant_FLAG_BILLBOARD_KEEP_SCALE:

.. rst-class:: classref-enumeration-constant

:ref:`Flags<enum_Material3D_Flags>` **FLAG_BILLBOARD_KEEP_SCALE** = ``7``

Shader will keep the scale set for the mesh. Otherwise the scale is lost when billboarding. Only applies when :ref:`params_billboard_mode<class_Material3D_property_params_billboard_mode>` is :ref:`BILLBOARD_ENABLED<class_Material3D_constant_BILLBOARD_ENABLED>`.

.. _class_Material3D_constant_FLAG_UV1_USE_TRIPLANAR:

.. rst-class:: classref-enumeration-constant

:ref:`Flags<enum_Material3D_Flags>` **FLAG_UV1_USE_TRIPLANAR** = ``8``

Use triplanar texture lookup for all texture lookups that would normally use ``UV``.

.. _class_Material3D_constant_FLAG_UV2_USE_TRIPLANAR:

.. rst-class:: classref-enumeration-constant

:ref:`Flags<enum_Material3D_Flags>` **FLAG_UV2_USE_TRIPLANAR** = ``9``

Use triplanar texture lookup for all texture lookups that would normally use ``UV2``.

.. _class_Material3D_constant_FLAG_AO_ON_UV2:

.. rst-class:: classref-enumeration-constant

:ref:`Flags<enum_Material3D_Flags>` **FLAG_AO_ON_UV2** = ``11``

Use ``UV2`` coordinates to look up from the :ref:`ao_texture<class_Material3D_property_ao_texture>`.

.. _class_Material3D_constant_FLAG_EMISSION_ON_UV2:

.. rst-class:: classref-enumeration-constant

:ref:`Flags<enum_Material3D_Flags>` **FLAG_EMISSION_ON_UV2** = ``12``

Use ``UV2`` coordinates to look up from the :ref:`emission_texture<class_Material3D_property_emission_texture>`.

.. _class_Material3D_constant_FLAG_USE_ALPHA_SCISSOR:

.. rst-class:: classref-enumeration-constant

:ref:`Flags<enum_Material3D_Flags>` **FLAG_USE_ALPHA_SCISSOR** = ``13``

Use alpha scissor. Set by :ref:`params_use_alpha_scissor<class_Material3D_property_params_use_alpha_scissor>`.

.. _class_Material3D_constant_FLAG_TRIPLANAR_USE_WORLD:

.. rst-class:: classref-enumeration-constant

:ref:`Flags<enum_Material3D_Flags>` **FLAG_TRIPLANAR_USE_WORLD** = ``10``

Use world coordinates in the triplanar texture lookup instead of local coordinates.

.. _class_Material3D_constant_FLAG_ALBEDO_TEXTURE_FORCE_SRGB:

.. rst-class:: classref-enumeration-constant

:ref:`Flags<enum_Material3D_Flags>` **FLAG_ALBEDO_TEXTURE_FORCE_SRGB** = ``14``

Forces the shader to convert albedo from sRGB space to linear space.

.. _class_Material3D_constant_FLAG_DONT_RECEIVE_SHADOWS:

.. rst-class:: classref-enumeration-constant

:ref:`Flags<enum_Material3D_Flags>` **FLAG_DONT_RECEIVE_SHADOWS** = ``15``

Disables receiving shadows from other objects.

.. _class_Material3D_constant_FLAG_DISABLE_AMBIENT_LIGHT:

.. rst-class:: classref-enumeration-constant

:ref:`Flags<enum_Material3D_Flags>` **FLAG_DISABLE_AMBIENT_LIGHT** = ``17``

Disables receiving ambient light.

.. _class_Material3D_constant_FLAG_ENSURE_CORRECT_NORMALS:

.. rst-class:: classref-enumeration-constant

:ref:`Flags<enum_Material3D_Flags>` **FLAG_ENSURE_CORRECT_NORMALS** = ``16``

Ensures that normals appear correct, even with non-uniform scaling.

.. _class_Material3D_constant_FLAG_USE_SHADOW_TO_OPACITY:

.. rst-class:: classref-enumeration-constant

:ref:`Flags<enum_Material3D_Flags>` **FLAG_USE_SHADOW_TO_OPACITY** = ``18``

Enables the shadow to opacity feature.

.. _class_Material3D_constant_FLAG_ALBEDO_TEXTURE_SDF:

.. rst-class:: classref-enumeration-constant

:ref:`Flags<enum_Material3D_Flags>` **FLAG_ALBEDO_TEXTURE_SDF** = ``19``

Enables signed distance field rendering shader.

.. _class_Material3D_constant_FLAG_MAX:

.. rst-class:: classref-enumeration-constant

:ref:`Flags<enum_Material3D_Flags>` **FLAG_MAX** = ``20``

Represents the size of the :ref:`Flags<enum_Material3D_Flags>` enum.

.. rst-class:: classref-item-separator

----

.. _enum_Material3D_DiffuseMode:

.. rst-class:: classref-enumeration

enum **DiffuseMode**:

.. _class_Material3D_constant_DIFFUSE_BURLEY:

.. rst-class:: classref-enumeration-constant

:ref:`DiffuseMode<enum_Material3D_DiffuseMode>` **DIFFUSE_BURLEY** = ``0``

Default diffuse scattering algorithm.

.. _class_Material3D_constant_DIFFUSE_LAMBERT:

.. rst-class:: classref-enumeration-constant

:ref:`DiffuseMode<enum_Material3D_DiffuseMode>` **DIFFUSE_LAMBERT** = ``1``

Diffuse scattering ignores roughness.

.. _class_Material3D_constant_DIFFUSE_LAMBERT_WRAP:

.. rst-class:: classref-enumeration-constant

:ref:`DiffuseMode<enum_Material3D_DiffuseMode>` **DIFFUSE_LAMBERT_WRAP** = ``2``

Extends Lambert to cover more than 90 degrees when roughness increases.

.. _class_Material3D_constant_DIFFUSE_OREN_NAYAR:

.. rst-class:: classref-enumeration-constant

:ref:`DiffuseMode<enum_Material3D_DiffuseMode>` **DIFFUSE_OREN_NAYAR** = ``3``

Attempts to use roughness to emulate microsurfacing.

.. _class_Material3D_constant_DIFFUSE_TOON:

.. rst-class:: classref-enumeration-constant

:ref:`DiffuseMode<enum_Material3D_DiffuseMode>` **DIFFUSE_TOON** = ``4``

Uses a hard cut for lighting, with smoothing affected by roughness.

.. rst-class:: classref-item-separator

----

.. _enum_Material3D_SpecularMode:

.. rst-class:: classref-enumeration

enum **SpecularMode**:

.. _class_Material3D_constant_SPECULAR_SCHLICK_GGX:

.. rst-class:: classref-enumeration-constant

:ref:`SpecularMode<enum_Material3D_SpecularMode>` **SPECULAR_SCHLICK_GGX** = ``0``

Default specular blob.

.. _class_Material3D_constant_SPECULAR_BLINN:

.. rst-class:: classref-enumeration-constant

:ref:`SpecularMode<enum_Material3D_SpecularMode>` **SPECULAR_BLINN** = ``1``

Older specular algorithm, included for compatibility.

.. _class_Material3D_constant_SPECULAR_PHONG:

.. rst-class:: classref-enumeration-constant

:ref:`SpecularMode<enum_Material3D_SpecularMode>` **SPECULAR_PHONG** = ``2``

Older specular algorithm, included for compatibility.

.. _class_Material3D_constant_SPECULAR_TOON:

.. rst-class:: classref-enumeration-constant

:ref:`SpecularMode<enum_Material3D_SpecularMode>` **SPECULAR_TOON** = ``3``

Toon blob which changes size based on roughness.

.. _class_Material3D_constant_SPECULAR_DISABLED:

.. rst-class:: classref-enumeration-constant

:ref:`SpecularMode<enum_Material3D_SpecularMode>` **SPECULAR_DISABLED** = ``4``

No specular blob.

.. rst-class:: classref-item-separator

----

.. _enum_Material3D_BillboardMode:

.. rst-class:: classref-enumeration

enum **BillboardMode**:

.. _class_Material3D_constant_BILLBOARD_DISABLED:

.. rst-class:: classref-enumeration-constant

:ref:`BillboardMode<enum_Material3D_BillboardMode>` **BILLBOARD_DISABLED** = ``0``

Billboard mode is disabled.

.. _class_Material3D_constant_BILLBOARD_ENABLED:

.. rst-class:: classref-enumeration-constant

:ref:`BillboardMode<enum_Material3D_BillboardMode>` **BILLBOARD_ENABLED** = ``1``

The object's Z axis will always face the camera.

.. _class_Material3D_constant_BILLBOARD_FIXED_Y:

.. rst-class:: classref-enumeration-constant

:ref:`BillboardMode<enum_Material3D_BillboardMode>` **BILLBOARD_FIXED_Y** = ``2``

The object's X axis will always face the camera.

.. _class_Material3D_constant_BILLBOARD_PARTICLES:

.. rst-class:: classref-enumeration-constant

:ref:`BillboardMode<enum_Material3D_BillboardMode>` **BILLBOARD_PARTICLES** = ``3``

Used for particle systems when assigned to :ref:`Particles<class_Particles>` and :ref:`CPUParticles<class_CPUParticles>` nodes. Enables ``particles_anim_*`` properties.

The :ref:`ParticlesMaterial.anim_speed<class_ParticlesMaterial_property_anim_speed>` or :ref:`CPUParticles.anim_speed<class_CPUParticles_property_anim_speed>` should also be set to a positive value for the animation to play.

.. rst-class:: classref-item-separator

----

.. _enum_Material3D_TextureChannel:

.. rst-class:: classref-enumeration

enum **TextureChannel**:

.. _class_Material3D_constant_TEXTURE_CHANNEL_RED:

.. rst-class:: classref-enumeration-constant

:ref:`TextureChannel<enum_Material3D_TextureChannel>` **TEXTURE_CHANNEL_RED** = ``0``

Used to read from the red channel of a texture.

.. _class_Material3D_constant_TEXTURE_CHANNEL_GREEN:

.. rst-class:: classref-enumeration-constant

:ref:`TextureChannel<enum_Material3D_TextureChannel>` **TEXTURE_CHANNEL_GREEN** = ``1``

Used to read from the green channel of a texture.

.. _class_Material3D_constant_TEXTURE_CHANNEL_BLUE:

.. rst-class:: classref-enumeration-constant

:ref:`TextureChannel<enum_Material3D_TextureChannel>` **TEXTURE_CHANNEL_BLUE** = ``2``

Used to read from the blue channel of a texture.

.. _class_Material3D_constant_TEXTURE_CHANNEL_ALPHA:

.. rst-class:: classref-enumeration-constant

:ref:`TextureChannel<enum_Material3D_TextureChannel>` **TEXTURE_CHANNEL_ALPHA** = ``3``

Used to read from the alpha channel of a texture.

.. _class_Material3D_constant_TEXTURE_CHANNEL_GRAYSCALE:

.. rst-class:: classref-enumeration-constant

:ref:`TextureChannel<enum_Material3D_TextureChannel>` **TEXTURE_CHANNEL_GRAYSCALE** = ``4``

Currently unused.

.. rst-class:: classref-item-separator

----

.. _enum_Material3D_EmissionOperator:

.. rst-class:: classref-enumeration

enum **EmissionOperator**:

.. _class_Material3D_constant_EMISSION_OP_ADD:

.. rst-class:: classref-enumeration-constant

:ref:`EmissionOperator<enum_Material3D_EmissionOperator>` **EMISSION_OP_ADD** = ``0``

Adds the emission color to the color from the emission texture.

.. _class_Material3D_constant_EMISSION_OP_MULTIPLY:

.. rst-class:: classref-enumeration-constant

:ref:`EmissionOperator<enum_Material3D_EmissionOperator>` **EMISSION_OP_MULTIPLY** = ``1``

Multiplies the emission color by the color from the emission texture.

.. rst-class:: classref-item-separator

----

.. _enum_Material3D_DistanceFadeMode:

.. rst-class:: classref-enumeration

enum **DistanceFadeMode**:

.. _class_Material3D_constant_DISTANCE_FADE_DISABLED:

.. rst-class:: classref-enumeration-constant

:ref:`DistanceFadeMode<enum_Material3D_DistanceFadeMode>` **DISTANCE_FADE_DISABLED** = ``0``

Do not use distance fade.

.. _class_Material3D_constant_DISTANCE_FADE_PIXEL_ALPHA:

.. rst-class:: classref-enumeration-constant

:ref:`DistanceFadeMode<enum_Material3D_DistanceFadeMode>` **DISTANCE_FADE_PIXEL_ALPHA** = ``1``

Smoothly fades the object out based on each pixel's distance from the camera using the alpha channel.

.. _class_Material3D_constant_DISTANCE_FADE_PIXEL_DITHER:

.. rst-class:: classref-enumeration-constant

:ref:`DistanceFadeMode<enum_Material3D_DistanceFadeMode>` **DISTANCE_FADE_PIXEL_DITHER** = ``2``

Smoothly fades the object out based on each pixel's distance from the camera using a dither approach. Dithering discards pixels based on a set pattern to smoothly fade without enabling transparency. On certain hardware this can be faster than :ref:`DISTANCE_FADE_PIXEL_ALPHA<class_Material3D_constant_DISTANCE_FADE_PIXEL_ALPHA>`.

.. _class_Material3D_constant_DISTANCE_FADE_OBJECT_DITHER:

.. rst-class:: classref-enumeration-constant

:ref:`DistanceFadeMode<enum_Material3D_DistanceFadeMode>` **DISTANCE_FADE_OBJECT_DITHER** = ``3``

Smoothly fades the object out based on the object's distance from the camera using a dither approach. Dithering discards pixels based on a set pattern to smoothly fade without enabling transparency. On certain hardware this can be faster than :ref:`DISTANCE_FADE_PIXEL_ALPHA<class_Material3D_constant_DISTANCE_FADE_PIXEL_ALPHA>`.

.. rst-class:: classref-item-separator

----

.. _enum_Material3D_AsyncMode:

.. rst-class:: classref-enumeration

enum **AsyncMode**:

.. _class_Material3D_constant_ASYNC_MODE_VISIBLE:

.. rst-class:: classref-enumeration-constant

:ref:`AsyncMode<enum_Material3D_AsyncMode>` **ASYNC_MODE_VISIBLE** = ``0``

The real conditioned shader needed on each situation will be sent for background compilation. In the meantime, a very complex shader that adapts to every situation will be used ("ubershader"). This ubershader is much slower to render, but will keep the game running without stalling to compile. Once shader compilation is done, the ubershader is replaced by the traditional optimized shader.

.. _class_Material3D_constant_ASYNC_MODE_HIDDEN:

.. rst-class:: classref-enumeration-constant

:ref:`AsyncMode<enum_Material3D_AsyncMode>` **ASYNC_MODE_HIDDEN** = ``1``

Anything with this material applied won't be rendered while this material's shader is being compiled.

This is useful for optimization, in cases where the visuals won't suffer from having certain non-essential elements missing during the short time their shaders are being compiled.

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

Property Descriptions
---------------------

.. _class_Material3D_property_albedo_color:

.. rst-class:: classref-property

:ref:`Color<class_Color>` **albedo_color** = ``Color( 1, 1, 1, 1 )``

.. rst-class:: classref-property-setget

- void **set_albedo** **(** :ref:`Color<class_Color>` value **)**
- :ref:`Color<class_Color>` **get_albedo** **(** **)**

The material's base color.

.. rst-class:: classref-item-separator

----

.. _class_Material3D_property_albedo_texture:

.. rst-class:: classref-property

:ref:`Texture<class_Texture>` **albedo_texture**

.. rst-class:: classref-property-setget

- void **set_texture** **(** :ref:`TextureParam<enum_Material3D_TextureParam>` param, :ref:`Texture<class_Texture>` texture **)**
- :ref:`Texture<class_Texture>` **get_texture** **(** :ref:`TextureParam<enum_Material3D_TextureParam>` param **)** |const|

Texture to multiply by :ref:`albedo_color<class_Material3D_property_albedo_color>`. Used for basic texturing of objects.

.. rst-class:: classref-item-separator

----

.. _class_Material3D_property_anisotropy:

.. rst-class:: classref-property

:ref:`float<class_float>` **anisotropy**

.. rst-class:: classref-property-setget

- void **set_anisotropy** **(** :ref:`float<class_float>` value **)**
- :ref:`float<class_float>` **get_anisotropy** **(** **)**

The strength of the anisotropy effect. This is multiplied by :ref:`anisotropy_flowmap<class_Material3D_property_anisotropy_flowmap>`'s alpha channel if a texture is defined there and the texture contains an alpha channel.

.. rst-class:: classref-item-separator

----

.. _class_Material3D_property_anisotropy_enabled:

.. rst-class:: classref-property

:ref:`bool<class_bool>` **anisotropy_enabled** = ``false``

.. rst-class:: classref-property-setget

- void **set_feature** **(** :ref:`Feature<enum_Material3D_Feature>` feature, :ref:`bool<class_bool>` enable **)**
- :ref:`bool<class_bool>` **get_feature** **(** :ref:`Feature<enum_Material3D_Feature>` feature **)** |const|

If ``true``, anisotropy is enabled. Anisotropy changes the shape of the specular blob and aligns it to tangent space. This is useful for brushed aluminium and hair reflections.

\ **Note:** Mesh tangents are needed for anisotropy to work. If the mesh does not contain tangents, the anisotropy effect will appear broken.

\ **Note:** Material anisotropy should not to be confused with anisotropic texture filtering. Anisotropic texture filtering can be enabled by selecting a texture in the FileSystem dock, going to the Import dock, checking the **Anisotropic** checkbox then clicking **Reimport**. The anisotropic filtering level can be changed by adjusting :ref:`ProjectSettings.rendering/quality/filters/anisotropic_filter_level<class_ProjectSettings_property_rendering/quality/filters/anisotropic_filter_level>`.

.. rst-class:: classref-item-separator

----

.. _class_Material3D_property_anisotropy_flowmap:

.. rst-class:: classref-property

:ref:`Texture<class_Texture>` **anisotropy_flowmap**

.. rst-class:: classref-property-setget

- void **set_texture** **(** :ref:`TextureParam<enum_Material3D_TextureParam>` param, :ref:`Texture<class_Texture>` texture **)**
- :ref:`Texture<class_Texture>` **get_texture** **(** :ref:`TextureParam<enum_Material3D_TextureParam>` param **)** |const|

Texture that offsets the tangent map for anisotropy calculations and optionally controls the anisotropy effect (if an alpha channel is present). The flowmap texture is expected to be a derivative map, with the red channel representing distortion on the X axis and green channel representing distortion on the Y axis. Values below 0.5 will result in negative distortion, whereas values above 0.5 will result in positive distortion.

If present, the texture's alpha channel will be used to multiply the strength of the :ref:`anisotropy<class_Material3D_property_anisotropy>` effect. Fully opaque pixels will keep the anisotropy effect's original strength while fully transparent pixels will disable the anisotropy effect entirely. The flowmap texture's blue channel is ignored.

.. rst-class:: classref-item-separator

----

.. _class_Material3D_property_ao_enabled:

.. rst-class:: classref-property

:ref:`bool<class_bool>` **ao_enabled** = ``false``

.. rst-class:: classref-property-setget

- void **set_feature** **(** :ref:`Feature<enum_Material3D_Feature>` feature, :ref:`bool<class_bool>` enable **)**
- :ref:`bool<class_bool>` **get_feature** **(** :ref:`Feature<enum_Material3D_Feature>` feature **)** |const|

If ``true``, ambient occlusion is enabled. Ambient occlusion darkens areas based on the :ref:`ao_texture<class_Material3D_property_ao_texture>`.

.. rst-class:: classref-item-separator

----

.. _class_Material3D_property_ao_light_affect:

.. rst-class:: classref-property

:ref:`float<class_float>` **ao_light_affect**

.. rst-class:: classref-property-setget

- void **set_ao_light_affect** **(** :ref:`float<class_float>` value **)**
- :ref:`float<class_float>` **get_ao_light_affect** **(** **)**

Amount that ambient occlusion affects lighting from lights. If ``0``, ambient occlusion only affects ambient light. If ``1``, ambient occlusion affects lights just as much as it affects ambient light. This can be used to impact the strength of the ambient occlusion effect, but typically looks unrealistic.

.. rst-class:: classref-item-separator

----

.. _class_Material3D_property_ao_on_uv2:

.. rst-class:: classref-property

:ref:`bool<class_bool>` **ao_on_uv2**

.. rst-class:: classref-property-setget

- void **set_flag** **(** :ref:`Flags<enum_Material3D_Flags>` flag, :ref:`bool<class_bool>` enable **)**
- :ref:`bool<class_bool>` **get_flag** **(** :ref:`Flags<enum_Material3D_Flags>` flag **)** |const|

If ``true``, use ``UV2`` coordinates to look up from the :ref:`ao_texture<class_Material3D_property_ao_texture>`.

.. rst-class:: classref-item-separator

----

.. _class_Material3D_property_ao_texture:

.. rst-class:: classref-property

:ref:`Texture<class_Texture>` **ao_texture**

.. rst-class:: classref-property-setget

- void **set_texture** **(** :ref:`TextureParam<enum_Material3D_TextureParam>` param, :ref:`Texture<class_Texture>` texture **)**
- :ref:`Texture<class_Texture>` **get_texture** **(** :ref:`TextureParam<enum_Material3D_TextureParam>` param **)** |const|

Texture that defines the amount of ambient occlusion for a given point on the object.

.. rst-class:: classref-item-separator

----

.. _class_Material3D_property_ao_texture_channel:

.. rst-class:: classref-property

:ref:`TextureChannel<enum_Material3D_TextureChannel>` **ao_texture_channel**

.. rst-class:: classref-property-setget

- void **set_ao_texture_channel** **(** :ref:`TextureChannel<enum_Material3D_TextureChannel>` value **)**
- :ref:`TextureChannel<enum_Material3D_TextureChannel>` **get_ao_texture_channel** **(** **)**

Specifies the channel of the :ref:`ao_texture<class_Material3D_property_ao_texture>` in which the ambient occlusion information is stored. This is useful when you store the information for multiple effects in a single texture. For example if you stored metallic in the red channel, roughness in the blue, and ambient occlusion in the green you could reduce the number of textures you use.

.. rst-class:: classref-item-separator

----

.. _class_Material3D_property_async_mode:

.. rst-class:: classref-property

:ref:`AsyncMode<enum_Material3D_AsyncMode>` **async_mode** = ``0``

.. rst-class:: classref-property-setget

- void **set_async_mode** **(** :ref:`AsyncMode<enum_Material3D_AsyncMode>` value **)**
- :ref:`AsyncMode<enum_Material3D_AsyncMode>` **get_async_mode** **(** **)**

If :ref:`ProjectSettings.rendering/gles3/shaders/shader_compilation_mode<class_ProjectSettings_property_rendering/gles3/shaders/shader_compilation_mode>` is ``Synchronous`` (with or without cache), this determines how this material must behave in regards to asynchronous shader compilation.

\ :ref:`ASYNC_MODE_VISIBLE<class_Material3D_constant_ASYNC_MODE_VISIBLE>` is the default and the best for most cases.

.. rst-class:: classref-item-separator

----

.. _class_Material3D_property_clearcoat:

.. rst-class:: classref-property

:ref:`float<class_float>` **clearcoat**

.. rst-class:: classref-property-setget

- void **set_clearcoat** **(** :ref:`float<class_float>` value **)**
- :ref:`float<class_float>` **get_clearcoat** **(** **)**

Sets the strength of the clearcoat effect. Setting to ``0`` looks the same as disabling the clearcoat effect.

.. rst-class:: classref-item-separator

----

.. _class_Material3D_property_clearcoat_enabled:

.. rst-class:: classref-property

:ref:`bool<class_bool>` **clearcoat_enabled** = ``false``

.. rst-class:: classref-property-setget

- void **set_feature** **(** :ref:`Feature<enum_Material3D_Feature>` feature, :ref:`bool<class_bool>` enable **)**
- :ref:`bool<class_bool>` **get_feature** **(** :ref:`Feature<enum_Material3D_Feature>` feature **)** |const|

If ``true``, clearcoat rendering is enabled. Adds a secondary transparent pass to the lighting calculation resulting in an added specular blob. This makes materials appear as if they have a clear layer on them that can be either glossy or rough.

\ **Note:** Clearcoat rendering is not visible if the material has :ref:`flags_unshaded<class_Material3D_property_flags_unshaded>` set to ``true``.

.. rst-class:: classref-item-separator

----

.. _class_Material3D_property_clearcoat_gloss:

.. rst-class:: classref-property

:ref:`float<class_float>` **clearcoat_gloss**

.. rst-class:: classref-property-setget

- void **set_clearcoat_gloss** **(** :ref:`float<class_float>` value **)**
- :ref:`float<class_float>` **get_clearcoat_gloss** **(** **)**

Sets the roughness of the clearcoat pass. A higher value results in a smoother clearcoat while a lower value results in a rougher clearcoat.

.. rst-class:: classref-item-separator

----

.. _class_Material3D_property_clearcoat_texture:

.. rst-class:: classref-property

:ref:`Texture<class_Texture>` **clearcoat_texture**

.. rst-class:: classref-property-setget

- void **set_texture** **(** :ref:`TextureParam<enum_Material3D_TextureParam>` param, :ref:`Texture<class_Texture>` texture **)**
- :ref:`Texture<class_Texture>` **get_texture** **(** :ref:`TextureParam<enum_Material3D_TextureParam>` param **)** |const|

Texture that defines the strength of the clearcoat effect and the glossiness of the clearcoat. Strength is specified in the red channel while glossiness is specified in the green channel.

.. rst-class:: classref-item-separator

----

.. _class_Material3D_property_depth_deep_parallax:

.. rst-class:: classref-property

:ref:`bool<class_bool>` **depth_deep_parallax**

.. rst-class:: classref-property-setget

- void **set_depth_deep_parallax** **(** :ref:`bool<class_bool>` value **)**
- :ref:`bool<class_bool>` **is_depth_deep_parallax_enabled** **(** **)**

If ``true``, the shader will read depth texture at multiple points along the view ray to determine occlusion and parrallax. This can be very performance demanding, but results in more realistic looking depth mapping.

.. rst-class:: classref-item-separator

----

.. _class_Material3D_property_depth_enabled:

.. rst-class:: classref-property

:ref:`bool<class_bool>` **depth_enabled** = ``false``

.. rst-class:: classref-property-setget

- void **set_feature** **(** :ref:`Feature<enum_Material3D_Feature>` feature, :ref:`bool<class_bool>` enable **)**
- :ref:`bool<class_bool>` **get_feature** **(** :ref:`Feature<enum_Material3D_Feature>` feature **)** |const|

If ``true``, depth mapping is enabled (also called "parallax mapping" or "height mapping"). See also :ref:`normal_enabled<class_Material3D_property_normal_enabled>`.

\ **Note:** Depth mapping is not supported if triplanar mapping is used on the same material. The value of :ref:`depth_enabled<class_Material3D_property_depth_enabled>` will be ignored if :ref:`uv1_triplanar<class_Material3D_property_uv1_triplanar>` is enabled.

.. rst-class:: classref-item-separator

----

.. _class_Material3D_property_depth_flip_binormal:

.. rst-class:: classref-property

:ref:`bool<class_bool>` **depth_flip_binormal**

.. rst-class:: classref-property-setget

- void **set_depth_deep_parallax_flip_binormal** **(** :ref:`bool<class_bool>` value **)**
- :ref:`bool<class_bool>` **get_depth_deep_parallax_flip_binormal** **(** **)**

If ``true``, direction of the binormal is flipped before using in the depth effect. This may be necessary if you have encoded your binormals in a way that is conflicting with the depth effect.

.. rst-class:: classref-item-separator

----

.. _class_Material3D_property_depth_flip_tangent:

.. rst-class:: classref-property

:ref:`bool<class_bool>` **depth_flip_tangent**

.. rst-class:: classref-property-setget

- void **set_depth_deep_parallax_flip_tangent** **(** :ref:`bool<class_bool>` value **)**
- :ref:`bool<class_bool>` **get_depth_deep_parallax_flip_tangent** **(** **)**

If ``true``, direction of the tangent is flipped before using in the depth effect. This may be necessary if you have encoded your tangents in a way that is conflicting with the depth effect.

.. rst-class:: classref-item-separator

----

.. _class_Material3D_property_depth_max_layers:

.. rst-class:: classref-property

:ref:`int<class_int>` **depth_max_layers**

.. rst-class:: classref-property-setget

- void **set_depth_deep_parallax_max_layers** **(** :ref:`int<class_int>` value **)**
- :ref:`int<class_int>` **get_depth_deep_parallax_max_layers** **(** **)**

Number of layers to use when using :ref:`depth_deep_parallax<class_Material3D_property_depth_deep_parallax>` and the view direction is perpendicular to the surface of the object. A higher number will be more performance demanding while a lower number may not look as crisp.

.. rst-class:: classref-item-separator

----

.. _class_Material3D_property_depth_min_layers:

.. rst-class:: classref-property

:ref:`int<class_int>` **depth_min_layers**

.. rst-class:: classref-property-setget

- void **set_depth_deep_parallax_min_layers** **(** :ref:`int<class_int>` value **)**
- :ref:`int<class_int>` **get_depth_deep_parallax_min_layers** **(** **)**

Number of layers to use when using :ref:`depth_deep_parallax<class_Material3D_property_depth_deep_parallax>` and the view direction is parallel to the surface of the object. A higher number will be more performance demanding while a lower number may not look as crisp.

.. rst-class:: classref-item-separator

----

.. _class_Material3D_property_depth_scale:

.. rst-class:: classref-property

:ref:`float<class_float>` **depth_scale**

.. rst-class:: classref-property-setget

- void **set_depth_scale** **(** :ref:`float<class_float>` value **)**
- :ref:`float<class_float>` **get_depth_scale** **(** **)**

Scales the depth offset effect. A higher number will create a larger depth.

.. rst-class:: classref-item-separator

----

.. _class_Material3D_property_depth_texture:

.. rst-class:: classref-property

:ref:`Texture<class_Texture>` **depth_texture**

.. rst-class:: classref-property-setget

- void **set_texture** **(** :ref:`TextureParam<enum_Material3D_TextureParam>` param, :ref:`Texture<class_Texture>` texture **)**
- :ref:`Texture<class_Texture>` **get_texture** **(** :ref:`TextureParam<enum_Material3D_TextureParam>` param **)** |const|

Texture used to determine depth at a given pixel. Depth is always stored in the red channel.

.. rst-class:: classref-item-separator

----

.. _class_Material3D_property_detail_albedo:

.. rst-class:: classref-property

:ref:`Texture<class_Texture>` **detail_albedo**

.. rst-class:: classref-property-setget

- void **set_texture** **(** :ref:`TextureParam<enum_Material3D_TextureParam>` param, :ref:`Texture<class_Texture>` texture **)**
- :ref:`Texture<class_Texture>` **get_texture** **(** :ref:`TextureParam<enum_Material3D_TextureParam>` param **)** |const|

Texture that specifies the color of the detail overlay.

.. rst-class:: classref-item-separator

----

.. _class_Material3D_property_detail_blend_mode:

.. rst-class:: classref-property

:ref:`BlendMode<enum_Material3D_BlendMode>` **detail_blend_mode**

.. rst-class:: classref-property-setget

- void **set_detail_blend_mode** **(** :ref:`BlendMode<enum_Material3D_BlendMode>` value **)**
- :ref:`BlendMode<enum_Material3D_BlendMode>` **get_detail_blend_mode** **(** **)**

Specifies how the :ref:`detail_albedo<class_Material3D_property_detail_albedo>` should blend with the current ``ALBEDO``. See :ref:`BlendMode<enum_Material3D_BlendMode>` for options.

.. rst-class:: classref-item-separator

----

.. _class_Material3D_property_detail_enabled:

.. rst-class:: classref-property

:ref:`bool<class_bool>` **detail_enabled** = ``false``

.. rst-class:: classref-property-setget

- void **set_feature** **(** :ref:`Feature<enum_Material3D_Feature>` feature, :ref:`bool<class_bool>` enable **)**
- :ref:`bool<class_bool>` **get_feature** **(** :ref:`Feature<enum_Material3D_Feature>` feature **)** |const|

If ``true``, enables the detail overlay. Detail is a second texture that gets mixed over the surface of the object based on :ref:`detail_mask<class_Material3D_property_detail_mask>`. This can be used to add variation to objects, or to blend between two different albedo/normal textures.

.. rst-class:: classref-item-separator

----

.. _class_Material3D_property_detail_mask:

.. rst-class:: classref-property

:ref:`Texture<class_Texture>` **detail_mask**

.. rst-class:: classref-property-setget

- void **set_texture** **(** :ref:`TextureParam<enum_Material3D_TextureParam>` param, :ref:`Texture<class_Texture>` texture **)**
- :ref:`Texture<class_Texture>` **get_texture** **(** :ref:`TextureParam<enum_Material3D_TextureParam>` param **)** |const|

Texture used to specify how the detail textures get blended with the base textures.

.. rst-class:: classref-item-separator

----

.. _class_Material3D_property_detail_normal:

.. rst-class:: classref-property

:ref:`Texture<class_Texture>` **detail_normal**

.. rst-class:: classref-property-setget

- void **set_texture** **(** :ref:`TextureParam<enum_Material3D_TextureParam>` param, :ref:`Texture<class_Texture>` texture **)**
- :ref:`Texture<class_Texture>` **get_texture** **(** :ref:`TextureParam<enum_Material3D_TextureParam>` param **)** |const|

Texture that specifies the per-pixel normal of the detail overlay.

\ **Note:** Redot expects the normal map to use X+, Y+, and Z+ coordinates. See `this page <http://wiki.polycount.com/wiki/Normal_Map_Technical_Details#Common_Swizzle_Coordinates>`__ for a comparison of normal map coordinates expected by popular engines.

.. rst-class:: classref-item-separator

----

.. _class_Material3D_property_detail_uv_layer:

.. rst-class:: classref-property

:ref:`DetailUV<enum_Material3D_DetailUV>` **detail_uv_layer**

.. rst-class:: classref-property-setget

- void **set_detail_uv** **(** :ref:`DetailUV<enum_Material3D_DetailUV>` value **)**
- :ref:`DetailUV<enum_Material3D_DetailUV>` **get_detail_uv** **(** **)**

Specifies whether to use ``UV`` or ``UV2`` for the detail layer. See :ref:`DetailUV<enum_Material3D_DetailUV>` for options.

.. rst-class:: classref-item-separator

----

.. _class_Material3D_property_distance_fade_max_distance:

.. rst-class:: classref-property

:ref:`float<class_float>` **distance_fade_max_distance**

.. rst-class:: classref-property-setget

- void **set_distance_fade_max_distance** **(** :ref:`float<class_float>` value **)**
- :ref:`float<class_float>` **get_distance_fade_max_distance** **(** **)**

Distance at which the object appears fully opaque.

\ **Note:** If ``distance_fade_max_distance`` is less than ``distance_fade_min_distance``, the behavior will be reversed. The object will start to fade away at ``distance_fade_max_distance`` and will fully disappear once it reaches ``distance_fade_min_distance``.

.. rst-class:: classref-item-separator

----

.. _class_Material3D_property_distance_fade_min_distance:

.. rst-class:: classref-property

:ref:`float<class_float>` **distance_fade_min_distance**

.. rst-class:: classref-property-setget

- void **set_distance_fade_min_distance** **(** :ref:`float<class_float>` value **)**
- :ref:`float<class_float>` **get_distance_fade_min_distance** **(** **)**

Distance at which the object starts to become visible. If the object is less than this distance away, it will be invisible.

\ **Note:** If ``distance_fade_min_distance`` is greater than ``distance_fade_max_distance``, the behavior will be reversed. The object will start to fade away at ``distance_fade_max_distance`` and will fully disappear once it reaches ``distance_fade_min_distance``.

.. rst-class:: classref-item-separator

----

.. _class_Material3D_property_distance_fade_mode:

.. rst-class:: classref-property

:ref:`DistanceFadeMode<enum_Material3D_DistanceFadeMode>` **distance_fade_mode** = ``0``

.. rst-class:: classref-property-setget

- void **set_distance_fade** **(** :ref:`DistanceFadeMode<enum_Material3D_DistanceFadeMode>` value **)**
- :ref:`DistanceFadeMode<enum_Material3D_DistanceFadeMode>` **get_distance_fade** **(** **)**

Specifies which type of fade to use. Can be any of the :ref:`DistanceFadeMode<enum_Material3D_DistanceFadeMode>`\ s.

.. rst-class:: classref-item-separator

----

.. _class_Material3D_property_emission:

.. rst-class:: classref-property

:ref:`Color<class_Color>` **emission**

.. rst-class:: classref-property-setget

- void **set_emission** **(** :ref:`Color<class_Color>` value **)**
- :ref:`Color<class_Color>` **get_emission** **(** **)**

The emitted light's color. See :ref:`emission_enabled<class_Material3D_property_emission_enabled>`.

.. rst-class:: classref-item-separator

----

.. _class_Material3D_property_emission_enabled:

.. rst-class:: classref-property

:ref:`bool<class_bool>` **emission_enabled** = ``false``

.. rst-class:: classref-property-setget

- void **set_feature** **(** :ref:`Feature<enum_Material3D_Feature>` feature, :ref:`bool<class_bool>` enable **)**
- :ref:`bool<class_bool>` **get_feature** **(** :ref:`Feature<enum_Material3D_Feature>` feature **)** |const|

If ``true``, the body emits light. Emitting light makes the object appear brighter. The object can also cast light on other objects if a :ref:`GIProbe<class_GIProbe>` or :ref:`BakedLightmap<class_BakedLightmap>` is used and this object is used in baked lighting.

.. rst-class:: classref-item-separator

----

.. _class_Material3D_property_emission_energy:

.. rst-class:: classref-property

:ref:`float<class_float>` **emission_energy**

.. rst-class:: classref-property-setget

- void **set_emission_energy** **(** :ref:`float<class_float>` value **)**
- :ref:`float<class_float>` **get_emission_energy** **(** **)**

The emitted light's strength. See :ref:`emission_enabled<class_Material3D_property_emission_enabled>`.

.. rst-class:: classref-item-separator

----

.. _class_Material3D_property_emission_on_uv2:

.. rst-class:: classref-property

:ref:`bool<class_bool>` **emission_on_uv2**

.. rst-class:: classref-property-setget

- void **set_flag** **(** :ref:`Flags<enum_Material3D_Flags>` flag, :ref:`bool<class_bool>` enable **)**
- :ref:`bool<class_bool>` **get_flag** **(** :ref:`Flags<enum_Material3D_Flags>` flag **)** |const|

Use ``UV2`` to read from the :ref:`emission_texture<class_Material3D_property_emission_texture>`.

.. rst-class:: classref-item-separator

----

.. _class_Material3D_property_emission_operator:

.. rst-class:: classref-property

:ref:`EmissionOperator<enum_Material3D_EmissionOperator>` **emission_operator**

.. rst-class:: classref-property-setget

- void **set_emission_operator** **(** :ref:`EmissionOperator<enum_Material3D_EmissionOperator>` value **)**
- :ref:`EmissionOperator<enum_Material3D_EmissionOperator>` **get_emission_operator** **(** **)**

Sets how :ref:`emission<class_Material3D_property_emission>` interacts with :ref:`emission_texture<class_Material3D_property_emission_texture>`. Can either add or multiply. See :ref:`EmissionOperator<enum_Material3D_EmissionOperator>` for options.

.. rst-class:: classref-item-separator

----

.. _class_Material3D_property_emission_texture:

.. rst-class:: classref-property

:ref:`Texture<class_Texture>` **emission_texture**

.. rst-class:: classref-property-setget

- void **set_texture** **(** :ref:`TextureParam<enum_Material3D_TextureParam>` param, :ref:`Texture<class_Texture>` texture **)**
- :ref:`Texture<class_Texture>` **get_texture** **(** :ref:`TextureParam<enum_Material3D_TextureParam>` param **)** |const|

Texture that specifies how much surface emits light at a given point.

.. rst-class:: classref-item-separator

----

.. _class_Material3D_property_flags_albedo_tex_force_srgb:

.. rst-class:: classref-property

:ref:`bool<class_bool>` **flags_albedo_tex_force_srgb** = ``false``

.. rst-class:: classref-property-setget

- void **set_flag** **(** :ref:`Flags<enum_Material3D_Flags>` flag, :ref:`bool<class_bool>` enable **)**
- :ref:`bool<class_bool>` **get_flag** **(** :ref:`Flags<enum_Material3D_Flags>` flag **)** |const|

Forces a conversion of the :ref:`albedo_texture<class_Material3D_property_albedo_texture>` from sRGB space to linear space.

.. rst-class:: classref-item-separator

----

.. _class_Material3D_property_flags_albedo_tex_msdf:

.. rst-class:: classref-property

:ref:`bool<class_bool>` **flags_albedo_tex_msdf** = ``false``

.. rst-class:: classref-property-setget

- void **set_flag** **(** :ref:`Flags<enum_Material3D_Flags>` flag, :ref:`bool<class_bool>` enable **)**
- :ref:`bool<class_bool>` **get_flag** **(** :ref:`Flags<enum_Material3D_Flags>` flag **)** |const|

Enables signed distance field rendering shader.

.. rst-class:: classref-item-separator

----

.. _class_Material3D_property_flags_disable_ambient_light:

.. rst-class:: classref-property

:ref:`bool<class_bool>` **flags_disable_ambient_light** = ``false``

.. rst-class:: classref-property-setget

- void **set_flag** **(** :ref:`Flags<enum_Material3D_Flags>` flag, :ref:`bool<class_bool>` enable **)**
- :ref:`bool<class_bool>` **get_flag** **(** :ref:`Flags<enum_Material3D_Flags>` flag **)** |const|

If ``true``, the object receives no ambient light.

.. rst-class:: classref-item-separator

----

.. _class_Material3D_property_flags_do_not_receive_shadows:

.. rst-class:: classref-property

:ref:`bool<class_bool>` **flags_do_not_receive_shadows** = ``false``

.. rst-class:: classref-property-setget

- void **set_flag** **(** :ref:`Flags<enum_Material3D_Flags>` flag, :ref:`bool<class_bool>` enable **)**
- :ref:`bool<class_bool>` **get_flag** **(** :ref:`Flags<enum_Material3D_Flags>` flag **)** |const|

If ``true``, the object receives no shadow that would otherwise be cast onto it.

.. rst-class:: classref-item-separator

----

.. _class_Material3D_property_flags_ensure_correct_normals:

.. rst-class:: classref-property

:ref:`bool<class_bool>` **flags_ensure_correct_normals** = ``false``

.. rst-class:: classref-property-setget

- void **set_flag** **(** :ref:`Flags<enum_Material3D_Flags>` flag, :ref:`bool<class_bool>` enable **)**
- :ref:`bool<class_bool>` **get_flag** **(** :ref:`Flags<enum_Material3D_Flags>` flag **)** |const|

If ``true``, the shader will compute extra operations to make sure the normal stays correct when using a non-uniform scale. Only enable if using non-uniform scaling.

.. rst-class:: classref-item-separator

----

.. _class_Material3D_property_flags_fixed_size:

.. rst-class:: classref-property

:ref:`bool<class_bool>` **flags_fixed_size** = ``false``

.. rst-class:: classref-property-setget

- void **set_flag** **(** :ref:`Flags<enum_Material3D_Flags>` flag, :ref:`bool<class_bool>` enable **)**
- :ref:`bool<class_bool>` **get_flag** **(** :ref:`Flags<enum_Material3D_Flags>` flag **)** |const|

If ``true``, the object is rendered at the same size regardless of distance.

.. rst-class:: classref-item-separator

----

.. _class_Material3D_property_flags_no_depth_test:

.. rst-class:: classref-property

:ref:`bool<class_bool>` **flags_no_depth_test** = ``false``

.. rst-class:: classref-property-setget

- void **set_flag** **(** :ref:`Flags<enum_Material3D_Flags>` flag, :ref:`bool<class_bool>` enable **)**
- :ref:`bool<class_bool>` **get_flag** **(** :ref:`Flags<enum_Material3D_Flags>` flag **)** |const|

If ``true``, depth testing is disabled and the object will be drawn in render order.

.. rst-class:: classref-item-separator

----

.. _class_Material3D_property_flags_transparent:

.. rst-class:: classref-property

:ref:`bool<class_bool>` **flags_transparent** = ``false``

.. rst-class:: classref-property-setget

- void **set_feature** **(** :ref:`Feature<enum_Material3D_Feature>` feature, :ref:`bool<class_bool>` enable **)**
- :ref:`bool<class_bool>` **get_feature** **(** :ref:`Feature<enum_Material3D_Feature>` feature **)** |const|

If ``true``, transparency is enabled on the body. See also :ref:`params_blend_mode<class_Material3D_property_params_blend_mode>`.

.. rst-class:: classref-item-separator

----

.. _class_Material3D_property_flags_unshaded:

.. rst-class:: classref-property

:ref:`bool<class_bool>` **flags_unshaded** = ``false``

.. rst-class:: classref-property-setget

- void **set_flag** **(** :ref:`Flags<enum_Material3D_Flags>` flag, :ref:`bool<class_bool>` enable **)**
- :ref:`bool<class_bool>` **get_flag** **(** :ref:`Flags<enum_Material3D_Flags>` flag **)** |const|

If ``true``, the object is unaffected by lighting.

.. rst-class:: classref-item-separator

----

.. _class_Material3D_property_flags_use_point_size:

.. rst-class:: classref-property

:ref:`bool<class_bool>` **flags_use_point_size** = ``false``

.. rst-class:: classref-property-setget

- void **set_flag** **(** :ref:`Flags<enum_Material3D_Flags>` flag, :ref:`bool<class_bool>` enable **)**
- :ref:`bool<class_bool>` **get_flag** **(** :ref:`Flags<enum_Material3D_Flags>` flag **)** |const|

If ``true``, render point size can be changed.

\ **Note:** This is only effective for objects whose geometry is point-based rather than triangle-based. See also :ref:`params_point_size<class_Material3D_property_params_point_size>`.

.. rst-class:: classref-item-separator

----

.. _class_Material3D_property_flags_use_shadow_to_opacity:

.. rst-class:: classref-property

:ref:`bool<class_bool>` **flags_use_shadow_to_opacity** = ``false``

.. rst-class:: classref-property-setget

- void **set_flag** **(** :ref:`Flags<enum_Material3D_Flags>` flag, :ref:`bool<class_bool>` enable **)**
- :ref:`bool<class_bool>` **get_flag** **(** :ref:`Flags<enum_Material3D_Flags>` flag **)** |const|

If ``true``, enables the "shadow to opacity" render mode where lighting modifies the alpha so shadowed areas are opaque and non-shadowed areas are transparent. Useful for overlaying shadows onto a camera feed in AR.

.. rst-class:: classref-item-separator

----

.. _class_Material3D_property_flags_vertex_lighting:

.. rst-class:: classref-property

:ref:`bool<class_bool>` **flags_vertex_lighting** = ``false``

.. rst-class:: classref-property-setget

- void **set_flag** **(** :ref:`Flags<enum_Material3D_Flags>` flag, :ref:`bool<class_bool>` enable **)**
- :ref:`bool<class_bool>` **get_flag** **(** :ref:`Flags<enum_Material3D_Flags>` flag **)** |const|

If ``true``, lighting is calculated per vertex rather than per pixel. This may increase performance on low-end devices, especially for meshes with a lower polygon count. The downside is that shading becomes much less accurate, with visible linear interpolation between vertices that are joined together. This can be compensated by ensuring meshes have a sufficient level of subdivision (but not too much, to avoid reducing performance). Some material features are also not supported when vertex shading is enabled.

See also :ref:`ProjectSettings.rendering/quality/shading/force_vertex_shading<class_ProjectSettings_property_rendering/quality/shading/force_vertex_shading>` which can globally enable vertex shading on all materials.

\ **Note:** By default, vertex shading is enforced on mobile platforms by :ref:`ProjectSettings.rendering/quality/shading/force_vertex_shading<class_ProjectSettings_property_rendering/quality/shading/force_vertex_shading>`'s ``mobile`` override.

\ **Note:** :ref:`flags_vertex_lighting<class_Material3D_property_flags_vertex_lighting>` has no effect if :ref:`flags_unshaded<class_Material3D_property_flags_unshaded>` is ``true``.

.. rst-class:: classref-item-separator

----

.. _class_Material3D_property_flags_world_triplanar:

.. rst-class:: classref-property

:ref:`bool<class_bool>` **flags_world_triplanar** = ``false``

.. rst-class:: classref-property-setget

- void **set_flag** **(** :ref:`Flags<enum_Material3D_Flags>` flag, :ref:`bool<class_bool>` enable **)**
- :ref:`bool<class_bool>` **get_flag** **(** :ref:`Flags<enum_Material3D_Flags>` flag **)** |const|

If ``true``, triplanar mapping is calculated in world space rather than object local space. See also :ref:`uv1_triplanar<class_Material3D_property_uv1_triplanar>`.

.. rst-class:: classref-item-separator

----

.. _class_Material3D_property_metallic:

.. rst-class:: classref-property

:ref:`float<class_float>` **metallic** = ``0.0``

.. rst-class:: classref-property-setget

- void **set_metallic** **(** :ref:`float<class_float>` value **)**
- :ref:`float<class_float>` **get_metallic** **(** **)**

A high value makes the material appear more like a metal. Non-metals use their albedo as the diffuse color and add diffuse to the specular reflection. With non-metals, the reflection appears on top of the albedo color. Metals use their albedo as a multiplier to the specular reflection and set the diffuse color to black resulting in a tinted reflection. Materials work better when fully metal or fully non-metal, values between ``0`` and ``1`` should only be used for blending between metal and non-metal sections. To alter the amount of reflection use :ref:`roughness<class_Material3D_property_roughness>`.

.. rst-class:: classref-item-separator

----

.. _class_Material3D_property_metallic_specular:

.. rst-class:: classref-property

:ref:`float<class_float>` **metallic_specular** = ``0.5``

.. rst-class:: classref-property-setget

- void **set_specular** **(** :ref:`float<class_float>` value **)**
- :ref:`float<class_float>` **get_specular** **(** **)**

Sets the size of the specular lobe. The specular lobe is the bright spot that is reflected from light sources.

\ **Note:** Unlike :ref:`metallic<class_Material3D_property_metallic>`, this is not energy-conserving, so it should be left at ``0.5`` in most cases. See also :ref:`roughness<class_Material3D_property_roughness>`.

.. rst-class:: classref-item-separator

----

.. _class_Material3D_property_metallic_texture:

.. rst-class:: classref-property

:ref:`Texture<class_Texture>` **metallic_texture**

.. rst-class:: classref-property-setget

- void **set_texture** **(** :ref:`TextureParam<enum_Material3D_TextureParam>` param, :ref:`Texture<class_Texture>` texture **)**
- :ref:`Texture<class_Texture>` **get_texture** **(** :ref:`TextureParam<enum_Material3D_TextureParam>` param **)** |const|

Texture used to specify metallic for an object. This is multiplied by :ref:`metallic<class_Material3D_property_metallic>`.

.. rst-class:: classref-item-separator

----

.. _class_Material3D_property_metallic_texture_channel:

.. rst-class:: classref-property

:ref:`TextureChannel<enum_Material3D_TextureChannel>` **metallic_texture_channel** = ``0``

.. rst-class:: classref-property-setget

- void **set_metallic_texture_channel** **(** :ref:`TextureChannel<enum_Material3D_TextureChannel>` value **)**
- :ref:`TextureChannel<enum_Material3D_TextureChannel>` **get_metallic_texture_channel** **(** **)**

Specifies the channel of the :ref:`metallic_texture<class_Material3D_property_metallic_texture>` in which the metallic information is stored. This is useful when you store the information for multiple effects in a single texture. For example if you stored metallic in the red channel, roughness in the blue, and ambient occlusion in the green you could reduce the number of textures you use.

.. rst-class:: classref-item-separator

----

.. _class_Material3D_property_normal_enabled:

.. rst-class:: classref-property

:ref:`bool<class_bool>` **normal_enabled** = ``false``

.. rst-class:: classref-property-setget

- void **set_feature** **(** :ref:`Feature<enum_Material3D_Feature>` feature, :ref:`bool<class_bool>` enable **)**
- :ref:`bool<class_bool>` **get_feature** **(** :ref:`Feature<enum_Material3D_Feature>` feature **)** |const|

If ``true``, normal mapping is enabled.

.. rst-class:: classref-item-separator

----

.. _class_Material3D_property_normal_scale:

.. rst-class:: classref-property

:ref:`float<class_float>` **normal_scale**

.. rst-class:: classref-property-setget

- void **set_normal_scale** **(** :ref:`float<class_float>` value **)**
- :ref:`float<class_float>` **get_normal_scale** **(** **)**

The strength of the normal map's effect.

.. rst-class:: classref-item-separator

----

.. _class_Material3D_property_normal_texture:

.. rst-class:: classref-property

:ref:`Texture<class_Texture>` **normal_texture**

.. rst-class:: classref-property-setget

- void **set_texture** **(** :ref:`TextureParam<enum_Material3D_TextureParam>` param, :ref:`Texture<class_Texture>` texture **)**
- :ref:`Texture<class_Texture>` **get_texture** **(** :ref:`TextureParam<enum_Material3D_TextureParam>` param **)** |const|

Texture used to specify the normal at a given pixel. The ``normal_texture`` only uses the red and green channels; the blue and alpha channels are ignored. The normal read from ``normal_texture`` is oriented around the surface normal provided by the :ref:`Mesh<class_Mesh>`.

\ **Note:** The mesh must have both normals and tangents defined in its vertex data. Otherwise, the normal map won't render correctly and will only appear to darken the whole surface. If creating geometry with :ref:`SurfaceTool<class_SurfaceTool>`, you can use :ref:`SurfaceTool.generate_normals<class_SurfaceTool_method_generate_normals>` and :ref:`SurfaceTool.generate_tangents<class_SurfaceTool_method_generate_tangents>` to automatically generate normals and tangents respectively.

\ **Note:** Redot expects the normal map to use X+, Y+, and Z+ coordinates. See `this page <http://wiki.polycount.com/wiki/Normal_Map_Technical_Details#Common_Swizzle_Coordinates>`__ for a comparison of normal map coordinates expected by popular engines.

.. rst-class:: classref-item-separator

----

.. _class_Material3D_property_orm_texture:

.. rst-class:: classref-property

:ref:`Texture<class_Texture>` **orm_texture**

.. rst-class:: classref-property-setget

- void **set_texture** **(** :ref:`TextureParam<enum_Material3D_TextureParam>` param, :ref:`Texture<class_Texture>` texture **)**
- :ref:`Texture<class_Texture>` **get_texture** **(** :ref:`TextureParam<enum_Material3D_TextureParam>` param **)** |const|

A single texture that combines information about AO, roughness and metallic. AO is stored in the red channel, roughness in the green channel and metallic in the blue channel.

.. rst-class:: classref-item-separator

----

.. _class_Material3D_property_params_alpha_scissor_threshold:

.. rst-class:: classref-property

:ref:`float<class_float>` **params_alpha_scissor_threshold**

.. rst-class:: classref-property-setget

- void **set_alpha_scissor_threshold** **(** :ref:`float<class_float>` value **)**
- :ref:`float<class_float>` **get_alpha_scissor_threshold** **(** **)**

Threshold at which the alpha scissor will discard values.

.. rst-class:: classref-item-separator

----

.. _class_Material3D_property_params_billboard_keep_scale:

.. rst-class:: classref-property

:ref:`bool<class_bool>` **params_billboard_keep_scale** = ``false``

.. rst-class:: classref-property-setget

- void **set_flag** **(** :ref:`Flags<enum_Material3D_Flags>` flag, :ref:`bool<class_bool>` enable **)**
- :ref:`bool<class_bool>` **get_flag** **(** :ref:`Flags<enum_Material3D_Flags>` flag **)** |const|

If ``true``, the shader will keep the scale set for the mesh. Otherwise the scale is lost when billboarding. Only applies when :ref:`params_billboard_mode<class_Material3D_property_params_billboard_mode>` is :ref:`BILLBOARD_ENABLED<class_Material3D_constant_BILLBOARD_ENABLED>`.

.. rst-class:: classref-item-separator

----

.. _class_Material3D_property_params_billboard_mode:

.. rst-class:: classref-property

:ref:`BillboardMode<enum_Material3D_BillboardMode>` **params_billboard_mode** = ``0``

.. rst-class:: classref-property-setget

- void **set_billboard_mode** **(** :ref:`BillboardMode<enum_Material3D_BillboardMode>` value **)**
- :ref:`BillboardMode<enum_Material3D_BillboardMode>` **get_billboard_mode** **(** **)**

Controls how the object faces the camera. See :ref:`BillboardMode<enum_Material3D_BillboardMode>`.

\ **Note:** Billboard mode is not suitable for VR because the left-right vector of the camera is not horizontal when the screen is attached to your head instead of on the table. See `GitHub issue #41567 <https://github.com/redot-engine/redot/issues/41567>`__ for details.

.. rst-class:: classref-item-separator

----

.. _class_Material3D_property_params_blend_mode:

.. rst-class:: classref-property

:ref:`BlendMode<enum_Material3D_BlendMode>` **params_blend_mode** = ``0``

.. rst-class:: classref-property-setget

- void **set_blend_mode** **(** :ref:`BlendMode<enum_Material3D_BlendMode>` value **)**
- :ref:`BlendMode<enum_Material3D_BlendMode>` **get_blend_mode** **(** **)**

The material's blend mode.

\ **Note:** Values other than ``Mix`` force the object into the transparent pipeline. See :ref:`BlendMode<enum_Material3D_BlendMode>`.

.. rst-class:: classref-item-separator

----

.. _class_Material3D_property_params_cull_mode:

.. rst-class:: classref-property

:ref:`CullMode<enum_Material3D_CullMode>` **params_cull_mode** = ``0``

.. rst-class:: classref-property-setget

- void **set_cull_mode** **(** :ref:`CullMode<enum_Material3D_CullMode>` value **)**
- :ref:`CullMode<enum_Material3D_CullMode>` **get_cull_mode** **(** **)**

Which side of the object is not drawn when backfaces are rendered. See :ref:`CullMode<enum_Material3D_CullMode>`.

.. rst-class:: classref-item-separator

----

.. _class_Material3D_property_params_depth_draw_mode:

.. rst-class:: classref-property

:ref:`DepthDrawMode<enum_Material3D_DepthDrawMode>` **params_depth_draw_mode** = ``0``

.. rst-class:: classref-property-setget

- void **set_depth_draw_mode** **(** :ref:`DepthDrawMode<enum_Material3D_DepthDrawMode>` value **)**
- :ref:`DepthDrawMode<enum_Material3D_DepthDrawMode>` **get_depth_draw_mode** **(** **)**

Determines when depth rendering takes place. See :ref:`DepthDrawMode<enum_Material3D_DepthDrawMode>`. See also :ref:`flags_transparent<class_Material3D_property_flags_transparent>`.

.. rst-class:: classref-item-separator

----

.. _class_Material3D_property_params_diffuse_mode:

.. rst-class:: classref-property

:ref:`DiffuseMode<enum_Material3D_DiffuseMode>` **params_diffuse_mode** = ``0``

.. rst-class:: classref-property-setget

- void **set_diffuse_mode** **(** :ref:`DiffuseMode<enum_Material3D_DiffuseMode>` value **)**
- :ref:`DiffuseMode<enum_Material3D_DiffuseMode>` **get_diffuse_mode** **(** **)**

The algorithm used for diffuse light scattering. See :ref:`DiffuseMode<enum_Material3D_DiffuseMode>`.

.. rst-class:: classref-item-separator

----

.. _class_Material3D_property_params_grow:

.. rst-class:: classref-property

:ref:`bool<class_bool>` **params_grow** = ``false``

.. rst-class:: classref-property-setget

- void **set_grow_enabled** **(** :ref:`bool<class_bool>` value **)**
- :ref:`bool<class_bool>` **is_grow_enabled** **(** **)**

If ``true``, enables the vertex grow setting. See :ref:`params_grow_amount<class_Material3D_property_params_grow_amount>`.

.. rst-class:: classref-item-separator

----

.. _class_Material3D_property_params_grow_amount:

.. rst-class:: classref-property

:ref:`float<class_float>` **params_grow_amount**

.. rst-class:: classref-property-setget

- void **set_grow** **(** :ref:`float<class_float>` value **)**
- :ref:`float<class_float>` **get_grow** **(** **)**

Grows object vertices in the direction of their normals.

.. rst-class:: classref-item-separator

----

.. _class_Material3D_property_params_line_width:

.. rst-class:: classref-property

:ref:`float<class_float>` **params_line_width** = ``1.0``

.. rst-class:: classref-property-setget

- void **set_line_width** **(** :ref:`float<class_float>` value **)**
- :ref:`float<class_float>` **get_line_width** **(** **)**

Currently unimplemented in Redot.

.. rst-class:: classref-item-separator

----

.. _class_Material3D_property_params_point_size:

.. rst-class:: classref-property

:ref:`float<class_float>` **params_point_size** = ``1.0``

.. rst-class:: classref-property-setget

- void **set_point_size** **(** :ref:`float<class_float>` value **)**
- :ref:`float<class_float>` **get_point_size** **(** **)**

The point size in pixels. See :ref:`flags_use_point_size<class_Material3D_property_flags_use_point_size>`.

.. rst-class:: classref-item-separator

----

.. _class_Material3D_property_params_specular_mode:

.. rst-class:: classref-property

:ref:`SpecularMode<enum_Material3D_SpecularMode>` **params_specular_mode** = ``0``

.. rst-class:: classref-property-setget

- void **set_specular_mode** **(** :ref:`SpecularMode<enum_Material3D_SpecularMode>` value **)**
- :ref:`SpecularMode<enum_Material3D_SpecularMode>` **get_specular_mode** **(** **)**

The method for rendering the specular blob. See :ref:`SpecularMode<enum_Material3D_SpecularMode>`.

.. rst-class:: classref-item-separator

----

.. _class_Material3D_property_params_use_alpha_scissor:

.. rst-class:: classref-property

:ref:`bool<class_bool>` **params_use_alpha_scissor** = ``false``

.. rst-class:: classref-property-setget

- void **set_flag** **(** :ref:`Flags<enum_Material3D_Flags>` flag, :ref:`bool<class_bool>` enable **)**
- :ref:`bool<class_bool>` **get_flag** **(** :ref:`Flags<enum_Material3D_Flags>` flag **)** |const|

If ``true``, the shader will discard all pixels that have an alpha value less than :ref:`params_alpha_scissor_threshold<class_Material3D_property_params_alpha_scissor_threshold>`.

.. rst-class:: classref-item-separator

----

.. _class_Material3D_property_particles_anim_h_frames:

.. rst-class:: classref-property

:ref:`int<class_int>` **particles_anim_h_frames**

.. rst-class:: classref-property-setget

- void **set_particles_anim_h_frames** **(** :ref:`int<class_int>` value **)**
- :ref:`int<class_int>` **get_particles_anim_h_frames** **(** **)**

The number of horizontal frames in the particle sprite sheet. Only enabled when using :ref:`BILLBOARD_PARTICLES<class_Material3D_constant_BILLBOARD_PARTICLES>`. See :ref:`params_billboard_mode<class_Material3D_property_params_billboard_mode>`.

.. rst-class:: classref-item-separator

----

.. _class_Material3D_property_particles_anim_loop:

.. rst-class:: classref-property

:ref:`bool<class_bool>` **particles_anim_loop**

.. rst-class:: classref-property-setget

- void **set_particles_anim_loop** **(** :ref:`bool<class_bool>` value **)**
- :ref:`bool<class_bool>` **get_particles_anim_loop** **(** **)**

If ``true``, particle animations are looped. Only enabled when using :ref:`BILLBOARD_PARTICLES<class_Material3D_constant_BILLBOARD_PARTICLES>`. See :ref:`params_billboard_mode<class_Material3D_property_params_billboard_mode>`.

.. rst-class:: classref-item-separator

----

.. _class_Material3D_property_particles_anim_v_frames:

.. rst-class:: classref-property

:ref:`int<class_int>` **particles_anim_v_frames**

.. rst-class:: classref-property-setget

- void **set_particles_anim_v_frames** **(** :ref:`int<class_int>` value **)**
- :ref:`int<class_int>` **get_particles_anim_v_frames** **(** **)**

The number of vertical frames in the particle sprite sheet. Only enabled when using :ref:`BILLBOARD_PARTICLES<class_Material3D_constant_BILLBOARD_PARTICLES>`. See :ref:`params_billboard_mode<class_Material3D_property_params_billboard_mode>`.

.. rst-class:: classref-item-separator

----

.. _class_Material3D_property_proximity_fade_distance:

.. rst-class:: classref-property

:ref:`float<class_float>` **proximity_fade_distance**

.. rst-class:: classref-property-setget

- void **set_proximity_fade_distance** **(** :ref:`float<class_float>` value **)**
- :ref:`float<class_float>` **get_proximity_fade_distance** **(** **)**

Distance over which the fade effect takes place. The larger the distance the longer it takes for an object to fade.

.. rst-class:: classref-item-separator

----

.. _class_Material3D_property_proximity_fade_enable:

.. rst-class:: classref-property

:ref:`bool<class_bool>` **proximity_fade_enable** = ``false``

.. rst-class:: classref-property-setget

- void **set_proximity_fade** **(** :ref:`bool<class_bool>` value **)**
- :ref:`bool<class_bool>` **is_proximity_fade_enabled** **(** **)**

If ``true``, the proximity fade effect is enabled. The proximity fade effect fades out each pixel based on its distance to another object.

.. rst-class:: classref-item-separator

----

.. _class_Material3D_property_refraction_enabled:

.. rst-class:: classref-property

:ref:`bool<class_bool>` **refraction_enabled** = ``false``

.. rst-class:: classref-property-setget

- void **set_feature** **(** :ref:`Feature<enum_Material3D_Feature>` feature, :ref:`bool<class_bool>` enable **)**
- :ref:`bool<class_bool>` **get_feature** **(** :ref:`Feature<enum_Material3D_Feature>` feature **)** |const|

If ``true``, the refraction effect is enabled. Refraction distorts transparency based on light from behind the object. When using the GLES3 backend, the material's roughness value will affect the blurriness of the refraction. Higher roughness values will make the refraction look blurrier.

.. rst-class:: classref-item-separator

----

.. _class_Material3D_property_refraction_scale:

.. rst-class:: classref-property

:ref:`float<class_float>` **refraction_scale**

.. rst-class:: classref-property-setget

- void **set_refraction** **(** :ref:`float<class_float>` value **)**
- :ref:`float<class_float>` **get_refraction** **(** **)**

The strength of the refraction effect. Higher values result in a more distorted appearance for the refraction.

.. rst-class:: classref-item-separator

----

.. _class_Material3D_property_refraction_texture:

.. rst-class:: classref-property

:ref:`Texture<class_Texture>` **refraction_texture**

.. rst-class:: classref-property-setget

- void **set_texture** **(** :ref:`TextureParam<enum_Material3D_TextureParam>` param, :ref:`Texture<class_Texture>` texture **)**
- :ref:`Texture<class_Texture>` **get_texture** **(** :ref:`TextureParam<enum_Material3D_TextureParam>` param **)** |const|

Texture that controls the strength of the refraction per-pixel. Multiplied by :ref:`refraction_scale<class_Material3D_property_refraction_scale>`.

.. rst-class:: classref-item-separator

----

.. _class_Material3D_property_refraction_texture_channel:

.. rst-class:: classref-property

:ref:`TextureChannel<enum_Material3D_TextureChannel>` **refraction_texture_channel**

.. rst-class:: classref-property-setget

- void **set_refraction_texture_channel** **(** :ref:`TextureChannel<enum_Material3D_TextureChannel>` value **)**
- :ref:`TextureChannel<enum_Material3D_TextureChannel>` **get_refraction_texture_channel** **(** **)**

Specifies the channel of the :ref:`refraction_texture<class_Material3D_property_refraction_texture>` in which the refraction information is stored. This is useful when you store the information for multiple effects in a single texture. For example if you stored metallic in the red channel, roughness in the blue, and ambient occlusion in the green you could reduce the number of textures you use.

.. rst-class:: classref-item-separator

----

.. _class_Material3D_property_rim:

.. rst-class:: classref-property

:ref:`float<class_float>` **rim**

.. rst-class:: classref-property-setget

- void **set_rim** **(** :ref:`float<class_float>` value **)**
- :ref:`float<class_float>` **get_rim** **(** **)**

Sets the strength of the rim lighting effect.

.. rst-class:: classref-item-separator

----

.. _class_Material3D_property_rim_enabled:

.. rst-class:: classref-property

:ref:`bool<class_bool>` **rim_enabled** = ``false``

.. rst-class:: classref-property-setget

- void **set_feature** **(** :ref:`Feature<enum_Material3D_Feature>` feature, :ref:`bool<class_bool>` enable **)**
- :ref:`bool<class_bool>` **get_feature** **(** :ref:`Feature<enum_Material3D_Feature>` feature **)** |const|

If ``true``, rim effect is enabled. Rim lighting increases the brightness at glancing angles on an object.

\ **Note:** Rim lighting is not visible if the material has :ref:`flags_unshaded<class_Material3D_property_flags_unshaded>` set to ``true``.

.. rst-class:: classref-item-separator

----

.. _class_Material3D_property_rim_texture:

.. rst-class:: classref-property

:ref:`Texture<class_Texture>` **rim_texture**

.. rst-class:: classref-property-setget

- void **set_texture** **(** :ref:`TextureParam<enum_Material3D_TextureParam>` param, :ref:`Texture<class_Texture>` texture **)**
- :ref:`Texture<class_Texture>` **get_texture** **(** :ref:`TextureParam<enum_Material3D_TextureParam>` param **)** |const|

Texture used to set the strength of the rim lighting effect per-pixel. Multiplied by :ref:`rim<class_Material3D_property_rim>`.

.. rst-class:: classref-item-separator

----

.. _class_Material3D_property_rim_tint:

.. rst-class:: classref-property

:ref:`float<class_float>` **rim_tint**

.. rst-class:: classref-property-setget

- void **set_rim_tint** **(** :ref:`float<class_float>` value **)**
- :ref:`float<class_float>` **get_rim_tint** **(** **)**

The amount of to blend light and albedo color when rendering rim effect. If ``0`` the light color is used, while ``1`` means albedo color is used. An intermediate value generally works best.

.. rst-class:: classref-item-separator

----

.. _class_Material3D_property_roughness:

.. rst-class:: classref-property

:ref:`float<class_float>` **roughness** = ``1.0``

.. rst-class:: classref-property-setget

- void **set_roughness** **(** :ref:`float<class_float>` value **)**
- :ref:`float<class_float>` **get_roughness** **(** **)**

Surface reflection. A value of ``0`` represents a perfect mirror while a value of ``1`` completely blurs the reflection. See also :ref:`metallic<class_Material3D_property_metallic>`.

.. rst-class:: classref-item-separator

----

.. _class_Material3D_property_roughness_texture:

.. rst-class:: classref-property

:ref:`Texture<class_Texture>` **roughness_texture**

.. rst-class:: classref-property-setget

- void **set_texture** **(** :ref:`TextureParam<enum_Material3D_TextureParam>` param, :ref:`Texture<class_Texture>` texture **)**
- :ref:`Texture<class_Texture>` **get_texture** **(** :ref:`TextureParam<enum_Material3D_TextureParam>` param **)** |const|

Texture used to control the roughness per-pixel. Multiplied by :ref:`roughness<class_Material3D_property_roughness>`.

.. rst-class:: classref-item-separator

----

.. _class_Material3D_property_roughness_texture_channel:

.. rst-class:: classref-property

:ref:`TextureChannel<enum_Material3D_TextureChannel>` **roughness_texture_channel** = ``0``

.. rst-class:: classref-property-setget

- void **set_roughness_texture_channel** **(** :ref:`TextureChannel<enum_Material3D_TextureChannel>` value **)**
- :ref:`TextureChannel<enum_Material3D_TextureChannel>` **get_roughness_texture_channel** **(** **)**

Specifies the channel of the :ref:`ao_texture<class_Material3D_property_ao_texture>` in which the ambient occlusion information is stored. This is useful when you store the information for multiple effects in a single texture. For example if you stored metallic in the red channel, roughness in the blue, and ambient occlusion in the green you could reduce the number of textures you use.

.. rst-class:: classref-item-separator

----

.. _class_Material3D_property_subsurf_scatter_enabled:

.. rst-class:: classref-property

:ref:`bool<class_bool>` **subsurf_scatter_enabled** = ``false``

.. rst-class:: classref-property-setget

- void **set_feature** **(** :ref:`Feature<enum_Material3D_Feature>` feature, :ref:`bool<class_bool>` enable **)**
- :ref:`bool<class_bool>` **get_feature** **(** :ref:`Feature<enum_Material3D_Feature>` feature **)** |const|

If ``true``, subsurface scattering is enabled. Emulates light that penetrates an object's surface, is scattered, and then emerges.

.. rst-class:: classref-item-separator

----

.. _class_Material3D_property_subsurf_scatter_strength:

.. rst-class:: classref-property

:ref:`float<class_float>` **subsurf_scatter_strength**

.. rst-class:: classref-property-setget

- void **set_subsurface_scattering_strength** **(** :ref:`float<class_float>` value **)**
- :ref:`float<class_float>` **get_subsurface_scattering_strength** **(** **)**

The strength of the subsurface scattering effect.

.. rst-class:: classref-item-separator

----

.. _class_Material3D_property_subsurf_scatter_texture:

.. rst-class:: classref-property

:ref:`Texture<class_Texture>` **subsurf_scatter_texture**

.. rst-class:: classref-property-setget

- void **set_texture** **(** :ref:`TextureParam<enum_Material3D_TextureParam>` param, :ref:`Texture<class_Texture>` texture **)**
- :ref:`Texture<class_Texture>` **get_texture** **(** :ref:`TextureParam<enum_Material3D_TextureParam>` param **)** |const|

Texture used to control the subsurface scattering strength. Stored in the red texture channel. Multiplied by :ref:`subsurf_scatter_strength<class_Material3D_property_subsurf_scatter_strength>`.

.. rst-class:: classref-item-separator

----

.. _class_Material3D_property_transmission:

.. rst-class:: classref-property

:ref:`Color<class_Color>` **transmission**

.. rst-class:: classref-property-setget

- void **set_transmission** **(** :ref:`Color<class_Color>` value **)**
- :ref:`Color<class_Color>` **get_transmission** **(** **)**

The color used by the transmission effect. Represents the light passing through an object.

.. rst-class:: classref-item-separator

----

.. _class_Material3D_property_transmission_enabled:

.. rst-class:: classref-property

:ref:`bool<class_bool>` **transmission_enabled** = ``false``

.. rst-class:: classref-property-setget

- void **set_feature** **(** :ref:`Feature<enum_Material3D_Feature>` feature, :ref:`bool<class_bool>` enable **)**
- :ref:`bool<class_bool>` **get_feature** **(** :ref:`Feature<enum_Material3D_Feature>` feature **)** |const|

If ``true``, the transmission effect is enabled.

.. rst-class:: classref-item-separator

----

.. _class_Material3D_property_transmission_texture:

.. rst-class:: classref-property

:ref:`Texture<class_Texture>` **transmission_texture**

.. rst-class:: classref-property-setget

- void **set_texture** **(** :ref:`TextureParam<enum_Material3D_TextureParam>` param, :ref:`Texture<class_Texture>` texture **)**
- :ref:`Texture<class_Texture>` **get_texture** **(** :ref:`TextureParam<enum_Material3D_TextureParam>` param **)** |const|

Texture used to control the transmission effect per-pixel. Added to :ref:`transmission<class_Material3D_property_transmission>`.

.. rst-class:: classref-item-separator

----

.. _class_Material3D_property_uv1_offset:

.. rst-class:: classref-property

:ref:`Vector3<class_Vector3>` **uv1_offset** = ``Vector3( 0, 0, 0 )``

.. rst-class:: classref-property-setget

- void **set_uv1_offset** **(** :ref:`Vector3<class_Vector3>` value **)**
- :ref:`Vector3<class_Vector3>` **get_uv1_offset** **(** **)**

How much to offset the ``UV`` coordinates. This amount will be added to ``UV`` in the vertex function. This can be used to offset a texture.

.. rst-class:: classref-item-separator

----

.. _class_Material3D_property_uv1_scale:

.. rst-class:: classref-property

:ref:`Vector3<class_Vector3>` **uv1_scale** = ``Vector3( 1, 1, 1 )``

.. rst-class:: classref-property-setget

- void **set_uv1_scale** **(** :ref:`Vector3<class_Vector3>` value **)**
- :ref:`Vector3<class_Vector3>` **get_uv1_scale** **(** **)**

How much to scale the ``UV`` coordinates. This is multiplied by ``UV`` in the vertex function.

.. rst-class:: classref-item-separator

----

.. _class_Material3D_property_uv1_triplanar:

.. rst-class:: classref-property

:ref:`bool<class_bool>` **uv1_triplanar** = ``false``

.. rst-class:: classref-property-setget

- void **set_flag** **(** :ref:`Flags<enum_Material3D_Flags>` flag, :ref:`bool<class_bool>` enable **)**
- :ref:`bool<class_bool>` **get_flag** **(** :ref:`Flags<enum_Material3D_Flags>` flag **)** |const|

If ``true``, instead of using ``UV`` textures will use a triplanar texture lookup to determine how to apply textures. Triplanar uses the orientation of the object's surface to blend between texture coordinates. It reads from the source texture 3 times, once for each axis and then blends between the results based on how closely the pixel aligns with each axis. This is often used for natural features to get a realistic blend of materials. Because triplanar texturing requires many more texture reads per-pixel it is much slower than normal UV texturing. Additionally, because it is blending the texture between the three axes, it is unsuitable when you are trying to achieve crisp texturing.

.. rst-class:: classref-item-separator

----

.. _class_Material3D_property_uv1_triplanar_sharpness:

.. rst-class:: classref-property

:ref:`float<class_float>` **uv1_triplanar_sharpness**

.. rst-class:: classref-property-setget

- void **set_uv1_triplanar_blend_sharpness** **(** :ref:`float<class_float>` value **)**
- :ref:`float<class_float>` **get_uv1_triplanar_blend_sharpness** **(** **)**

A lower number blends the texture more softly while a higher number blends the texture more sharply.

\ **Note:** :ref:`uv1_triplanar_sharpness<class_Material3D_property_uv1_triplanar_sharpness>` is clamped between ``0.0`` and ``150.0`` (inclusive) as values outside that range can look broken depending on the mesh.

.. rst-class:: classref-item-separator

----

.. _class_Material3D_property_uv2_offset:

.. rst-class:: classref-property

:ref:`Vector3<class_Vector3>` **uv2_offset** = ``Vector3( 0, 0, 0 )``

.. rst-class:: classref-property-setget

- void **set_uv2_offset** **(** :ref:`Vector3<class_Vector3>` value **)**
- :ref:`Vector3<class_Vector3>` **get_uv2_offset** **(** **)**

How much to offset the ``UV2`` coordinates. This amount will be added to ``UV2`` in the vertex function. This can be used to offset a texture.

.. rst-class:: classref-item-separator

----

.. _class_Material3D_property_uv2_scale:

.. rst-class:: classref-property

:ref:`Vector3<class_Vector3>` **uv2_scale** = ``Vector3( 1, 1, 1 )``

.. rst-class:: classref-property-setget

- void **set_uv2_scale** **(** :ref:`Vector3<class_Vector3>` value **)**
- :ref:`Vector3<class_Vector3>` **get_uv2_scale** **(** **)**

How much to scale the ``UV2`` coordinates. This is multiplied by ``UV2`` in the vertex function.

.. rst-class:: classref-item-separator

----

.. _class_Material3D_property_uv2_triplanar:

.. rst-class:: classref-property

:ref:`bool<class_bool>` **uv2_triplanar** = ``false``

.. rst-class:: classref-property-setget

- void **set_flag** **(** :ref:`Flags<enum_Material3D_Flags>` flag, :ref:`bool<class_bool>` enable **)**
- :ref:`bool<class_bool>` **get_flag** **(** :ref:`Flags<enum_Material3D_Flags>` flag **)** |const|

If ``true``, instead of using ``UV2`` textures will use a triplanar texture lookup to determine how to apply textures. Triplanar uses the orientation of the object's surface to blend between texture coordinates. It reads from the source texture 3 times, once for each axis and then blends between the results based on how closely the pixel aligns with each axis. This is often used for natural features to get a realistic blend of materials. Because triplanar texturing requires many more texture reads per-pixel it is much slower than normal UV texturing. Additionally, because it is blending the texture between the three axes, it is unsuitable when you are trying to achieve crisp texturing.

.. rst-class:: classref-item-separator

----

.. _class_Material3D_property_uv2_triplanar_sharpness:

.. rst-class:: classref-property

:ref:`float<class_float>` **uv2_triplanar_sharpness**

.. rst-class:: classref-property-setget

- void **set_uv2_triplanar_blend_sharpness** **(** :ref:`float<class_float>` value **)**
- :ref:`float<class_float>` **get_uv2_triplanar_blend_sharpness** **(** **)**

A lower number blends the texture more softly while a higher number blends the texture more sharply.

\ **Note:** :ref:`uv2_triplanar_sharpness<class_Material3D_property_uv2_triplanar_sharpness>` is clamped between ``0.0`` and ``150.0`` (inclusive) as values outside that range can look broken depending on the mesh.

.. rst-class:: classref-item-separator

----

.. _class_Material3D_property_vertex_color_is_srgb:

.. rst-class:: classref-property

:ref:`bool<class_bool>` **vertex_color_is_srgb** = ``false``

.. rst-class:: classref-property-setget

- void **set_flag** **(** :ref:`Flags<enum_Material3D_Flags>` flag, :ref:`bool<class_bool>` enable **)**
- :ref:`bool<class_bool>` **get_flag** **(** :ref:`Flags<enum_Material3D_Flags>` flag **)** |const|

If ``true``, the model's vertex colors are processed as sRGB mode.

.. rst-class:: classref-item-separator

----

.. _class_Material3D_property_vertex_color_use_as_albedo:

.. rst-class:: classref-property

:ref:`bool<class_bool>` **vertex_color_use_as_albedo** = ``false``

.. rst-class:: classref-property-setget

- void **set_flag** **(** :ref:`Flags<enum_Material3D_Flags>` flag, :ref:`bool<class_bool>` enable **)**
- :ref:`bool<class_bool>` **get_flag** **(** :ref:`Flags<enum_Material3D_Flags>` flag **)** |const|

If ``true``, the vertex color is used as albedo color.

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

Method Descriptions
-------------------

.. _class_Material3D_method_get_feature:

.. rst-class:: classref-method

:ref:`bool<class_bool>` **get_feature** **(** :ref:`Feature<enum_Material3D_Feature>` feature **)** |const|

Returns ``true``, if the specified :ref:`Feature<enum_Material3D_Feature>` is enabled.

.. rst-class:: classref-item-separator

----

.. _class_Material3D_method_get_flag:

.. rst-class:: classref-method

:ref:`bool<class_bool>` **get_flag** **(** :ref:`Flags<enum_Material3D_Flags>` flag **)** |const|

Returns ``true``, if the specified flag is enabled. See :ref:`Flags<enum_Material3D_Flags>` enumerator for options.

.. rst-class:: classref-item-separator

----

.. _class_Material3D_method_get_texture:

.. rst-class:: classref-method

:ref:`Texture<class_Texture>` **get_texture** **(** :ref:`TextureParam<enum_Material3D_TextureParam>` param **)** |const|

Returns the :ref:`Texture<class_Texture>` associated with the specified :ref:`TextureParam<enum_Material3D_TextureParam>`.

.. rst-class:: classref-item-separator

----

.. _class_Material3D_method_set_feature:

.. rst-class:: classref-method

void **set_feature** **(** :ref:`Feature<enum_Material3D_Feature>` feature, :ref:`bool<class_bool>` enable **)**

If ``true``, enables the specified :ref:`Feature<enum_Material3D_Feature>`. Many features that are available in :ref:`SpatialMaterial<class_SpatialMaterial>`\ s need to be enabled before use. This way the cost for using the feature is only incurred when specified. Features can also be enabled by setting the corresponding member to ``true``.

.. rst-class:: classref-item-separator

----

.. _class_Material3D_method_set_flag:

.. rst-class:: classref-method

void **set_flag** **(** :ref:`Flags<enum_Material3D_Flags>` flag, :ref:`bool<class_bool>` enable **)**

If ``true``, enables the specified flag. Flags are optional behavior that can be turned on and off. Only one flag can be enabled at a time with this function, the flag enumerators cannot be bit-masked together to enable or disable multiple flags at once. Flags can also be enabled by setting the corresponding member to ``true``. See :ref:`Flags<enum_Material3D_Flags>` enumerator for options.

.. rst-class:: classref-item-separator

----

.. _class_Material3D_method_set_texture:

.. rst-class:: classref-method

void **set_texture** **(** :ref:`TextureParam<enum_Material3D_TextureParam>` param, :ref:`Texture<class_Texture>` texture **)**

Sets the :ref:`Texture<class_Texture>` to be used by the specified :ref:`TextureParam<enum_Material3D_TextureParam>`. This function is called when setting members ending in ``*_texture``.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
.. |static| replace:: :abbr:`static (This method doesn't need an instance to be called, so it can be called directly using the class name.)`
