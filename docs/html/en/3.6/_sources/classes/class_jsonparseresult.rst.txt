:github_url: hide

.. DO NOT EDIT THIS FILE!!!
.. Generated automatically from Redot engine sources.
.. Generator: https://github.com/redot-engine/redot/tree/3.6/doc/tools/make_rst.py.
.. XML source: https://github.com/redot-engine/redot/tree/3.6/doc/classes/JSONParseResult.xml.

.. _class_JSONParseResult:

JSONParseResult
===============

**Inherits:** :ref:`Reference<class_Reference>` **<** :ref:`Object<class_Object>`

Data class wrapper for decoded JSON.

.. rst-class:: classref-introduction-group

Description
-----------

Returned by :ref:`JSON.parse<class_JSON_method_parse>`, **JSONParseResult** contains the decoded JSON or error information if the JSON source wasn't successfully parsed. You can check if the JSON source was successfully parsed with ``if json_result.error == OK``.

.. rst-class:: classref-reftable-group

Properties
----------

.. table::
   :widths: auto

   +---------------------------------------+------------------------------------------------------------------+--------+
   | :ref:`Error<enum_@GlobalScope_Error>` | :ref:`error<class_JSONParseResult_property_error>`               |        |
   +---------------------------------------+------------------------------------------------------------------+--------+
   | :ref:`int<class_int>`                 | :ref:`error_line<class_JSONParseResult_property_error_line>`     | ``-1`` |
   +---------------------------------------+------------------------------------------------------------------+--------+
   | :ref:`String<class_String>`           | :ref:`error_string<class_JSONParseResult_property_error_string>` | ``""`` |
   +---------------------------------------+------------------------------------------------------------------+--------+
   | :ref:`Variant<class_Variant>`         | :ref:`result<class_JSONParseResult_property_result>`             |        |
   +---------------------------------------+------------------------------------------------------------------+--------+

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

Property Descriptions
---------------------

.. _class_JSONParseResult_property_error:

.. rst-class:: classref-property

:ref:`Error<enum_@GlobalScope_Error>` **error**

.. rst-class:: classref-property-setget

- void **set_error** **(** :ref:`Error<enum_@GlobalScope_Error>` value **)**
- :ref:`Error<enum_@GlobalScope_Error>` **get_error** **(** **)**

The error type if the JSON source was not successfully parsed. See the :ref:`Error<enum_@GlobalScope_Error>` constants.

.. rst-class:: classref-item-separator

----

.. _class_JSONParseResult_property_error_line:

.. rst-class:: classref-property

:ref:`int<class_int>` **error_line** = ``-1``

.. rst-class:: classref-property-setget

- void **set_error_line** **(** :ref:`int<class_int>` value **)**
- :ref:`int<class_int>` **get_error_line** **(** **)**

The line number where the error occurred if the JSON source was not successfully parsed.

.. rst-class:: classref-item-separator

----

.. _class_JSONParseResult_property_error_string:

.. rst-class:: classref-property

:ref:`String<class_String>` **error_string** = ``""``

.. rst-class:: classref-property-setget

- void **set_error_string** **(** :ref:`String<class_String>` value **)**
- :ref:`String<class_String>` **get_error_string** **(** **)**

The error message if the JSON source was not successfully parsed. See the :ref:`Error<enum_@GlobalScope_Error>` constants.

.. rst-class:: classref-item-separator

----

.. _class_JSONParseResult_property_result:

.. rst-class:: classref-property

:ref:`Variant<class_Variant>` **result**

.. rst-class:: classref-property-setget

- void **set_result** **(** :ref:`Variant<class_Variant>` value **)**
- :ref:`Variant<class_Variant>` **get_result** **(** **)**

A :ref:`Variant<class_Variant>` containing the parsed JSON. Use :ref:`@GDScript.typeof<class_@GDScript_method_typeof>` or the ``is`` keyword to check if it is what you expect. For example, if the JSON source starts with curly braces (``{}``), a :ref:`Dictionary<class_Dictionary>` will be returned. If the JSON source starts with brackets (``[]``), an :ref:`Array<class_Array>` will be returned.

\ **Note:** The JSON specification does not define integer or float types, but only a *number* type. Therefore, parsing a JSON text will convert all numerical values to :ref:`float<class_float>` types.

\ **Note:** JSON objects do not preserve key order like Redot dictionaries, thus, you should not rely on keys being in a certain order if a dictionary is constructed from JSON. In contrast, JSON arrays retain the order of their elements:

::

    var p = JSON.parse('["hello", "world", "!"]')
    if typeof(p.result) == TYPE_ARRAY:
        print(p.result[0]) # Prints "hello"
    else:
        push_error("Unexpected results.")

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
.. |static| replace:: :abbr:`static (This method doesn't need an instance to be called, so it can be called directly using the class name.)`
