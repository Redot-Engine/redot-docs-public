:github_url: hide

.. DO NOT EDIT THIS FILE!!!
.. Generated automatically from Redot engine sources.
.. Generator: https://github.com/redot-engine/redot/tree/3.6/doc/tools/make_rst.py.
.. XML source: https://github.com/redot-engine/redot/tree/3.6/doc/classes/Particles.xml.

.. _class_Particles:

Particles
=========

**Inherits:** :ref:`GeometryInstance<class_GeometryInstance>` **<** :ref:`VisualInstance<class_VisualInstance>` **<** :ref:`CullInstance<class_CullInstance>` **<** :ref:`Spatial<class_Spatial>` **<** :ref:`Node<class_Node>` **<** :ref:`Object<class_Object>`

GPU-based 3D particle emitter.

.. rst-class:: classref-introduction-group

Description
-----------

3D particle node used to create a variety of particle systems and effects. **Particles** features an emitter that generates some number of particles at a given rate.

Use the ``process_material`` property to add a :ref:`ParticlesMaterial<class_ParticlesMaterial>` to configure particle appearance and behavior. Alternatively, you can add a :ref:`ShaderMaterial<class_ShaderMaterial>` which will be applied to all particles.

\ **Note:** **Particles** only work when using the GLES3 renderer. If using the GLES2 renderer, use :ref:`CPUParticles<class_CPUParticles>` instead. You can convert **Particles** to :ref:`CPUParticles<class_CPUParticles>` by selecting the node, clicking the **Particles** menu at the top of the 3D editor viewport then choosing **Convert to CPUParticles**.

\ **Note:** On macOS, **Particles** rendering is much slower than :ref:`CPUParticles<class_CPUParticles>` due to transform feedback being implemented on the CPU instead of the GPU. Consider using :ref:`CPUParticles<class_CPUParticles>` instead when targeting macOS.

\ **Note:** After working on a Particles node, remember to update its :ref:`visibility_aabb<class_Particles_property_visibility_aabb>` by selecting it, clicking the **Particles** menu at the top of the 3D editor viewport then choose **Generate Visibility AABB**. Otherwise, particles may suddenly disappear depending on the camera position and angle.

.. rst-class:: classref-introduction-group

Tutorials
---------

- :doc:`Controlling thousands of fish with Particles <../tutorials/performance/vertex_animation/controlling_thousands_of_fish>`

- `Third Person Shooter Demo <https://redotengine.org/asset-library/asset/678>`__

.. rst-class:: classref-reftable-group

Properties
----------

.. table::
   :widths: auto

   +--------------------------------------------+--------------------------------------------------------------------+---------------------------------+
   | :ref:`int<class_int>`                      | :ref:`amount<class_Particles_property_amount>`                     | ``8``                           |
   +--------------------------------------------+--------------------------------------------------------------------+---------------------------------+
   | :ref:`DrawOrder<enum_Particles_DrawOrder>` | :ref:`draw_order<class_Particles_property_draw_order>`             | ``0``                           |
   +--------------------------------------------+--------------------------------------------------------------------+---------------------------------+
   | :ref:`Mesh<class_Mesh>`                    | :ref:`draw_pass_1<class_Particles_property_draw_pass_1>`           |                                 |
   +--------------------------------------------+--------------------------------------------------------------------+---------------------------------+
   | :ref:`Mesh<class_Mesh>`                    | :ref:`draw_pass_2<class_Particles_property_draw_pass_2>`           |                                 |
   +--------------------------------------------+--------------------------------------------------------------------+---------------------------------+
   | :ref:`Mesh<class_Mesh>`                    | :ref:`draw_pass_3<class_Particles_property_draw_pass_3>`           |                                 |
   +--------------------------------------------+--------------------------------------------------------------------+---------------------------------+
   | :ref:`Mesh<class_Mesh>`                    | :ref:`draw_pass_4<class_Particles_property_draw_pass_4>`           |                                 |
   +--------------------------------------------+--------------------------------------------------------------------+---------------------------------+
   | :ref:`int<class_int>`                      | :ref:`draw_passes<class_Particles_property_draw_passes>`           | ``1``                           |
   +--------------------------------------------+--------------------------------------------------------------------+---------------------------------+
   | :ref:`bool<class_bool>`                    | :ref:`emitting<class_Particles_property_emitting>`                 | ``true``                        |
   +--------------------------------------------+--------------------------------------------------------------------+---------------------------------+
   | :ref:`float<class_float>`                  | :ref:`explosiveness<class_Particles_property_explosiveness>`       | ``0.0``                         |
   +--------------------------------------------+--------------------------------------------------------------------+---------------------------------+
   | :ref:`int<class_int>`                      | :ref:`fixed_fps<class_Particles_property_fixed_fps>`               | ``0``                           |
   +--------------------------------------------+--------------------------------------------------------------------+---------------------------------+
   | :ref:`bool<class_bool>`                    | :ref:`fract_delta<class_Particles_property_fract_delta>`           | ``true``                        |
   +--------------------------------------------+--------------------------------------------------------------------+---------------------------------+
   | :ref:`float<class_float>`                  | :ref:`lifetime<class_Particles_property_lifetime>`                 | ``1.0``                         |
   +--------------------------------------------+--------------------------------------------------------------------+---------------------------------+
   | :ref:`bool<class_bool>`                    | :ref:`local_coords<class_Particles_property_local_coords>`         | ``true``                        |
   +--------------------------------------------+--------------------------------------------------------------------+---------------------------------+
   | :ref:`bool<class_bool>`                    | :ref:`one_shot<class_Particles_property_one_shot>`                 | ``false``                       |
   +--------------------------------------------+--------------------------------------------------------------------+---------------------------------+
   | :ref:`float<class_float>`                  | :ref:`preprocess<class_Particles_property_preprocess>`             | ``0.0``                         |
   +--------------------------------------------+--------------------------------------------------------------------+---------------------------------+
   | :ref:`Material<class_Material>`            | :ref:`process_material<class_Particles_property_process_material>` |                                 |
   +--------------------------------------------+--------------------------------------------------------------------+---------------------------------+
   | :ref:`float<class_float>`                  | :ref:`randomness<class_Particles_property_randomness>`             | ``0.0``                         |
   +--------------------------------------------+--------------------------------------------------------------------+---------------------------------+
   | :ref:`float<class_float>`                  | :ref:`speed_scale<class_Particles_property_speed_scale>`           | ``1.0``                         |
   +--------------------------------------------+--------------------------------------------------------------------+---------------------------------+
   | :ref:`AABB<class_AABB>`                    | :ref:`visibility_aabb<class_Particles_property_visibility_aabb>`   | ``AABB( -4, -4, -4, 8, 8, 8 )`` |
   +--------------------------------------------+--------------------------------------------------------------------+---------------------------------+

.. rst-class:: classref-reftable-group

Methods
-------

.. table::
   :widths: auto

   +-------------------------+-------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`AABB<class_AABB>` | :ref:`capture_aabb<class_Particles_method_capture_aabb>` **(** **)** |const|                                                              |
   +-------------------------+-------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`Mesh<class_Mesh>` | :ref:`get_draw_pass_mesh<class_Particles_method_get_draw_pass_mesh>` **(** :ref:`int<class_int>` pass **)** |const|                       |
   +-------------------------+-------------------------------------------------------------------------------------------------------------------------------------------+
   | void                    | :ref:`restart<class_Particles_method_restart>` **(** **)**                                                                                |
   +-------------------------+-------------------------------------------------------------------------------------------------------------------------------------------+
   | void                    | :ref:`set_draw_pass_mesh<class_Particles_method_set_draw_pass_mesh>` **(** :ref:`int<class_int>` pass, :ref:`Mesh<class_Mesh>` mesh **)** |
   +-------------------------+-------------------------------------------------------------------------------------------------------------------------------------------+

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

Signals
-------

.. _class_Particles_signal_finished:

.. rst-class:: classref-signal

**finished** **(** **)**

Emitted when all active particles have finished processing. When :ref:`one_shot<class_Particles_property_one_shot>` is disabled, particles will process continuously, so this is never emitted.

\ **Note:** Due to the particles being computed on the GPU there might be a delay before the signal gets emitted.

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

Enumerations
------------

.. _enum_Particles_DrawOrder:

.. rst-class:: classref-enumeration

enum **DrawOrder**:

.. _class_Particles_constant_DRAW_ORDER_INDEX:

.. rst-class:: classref-enumeration-constant

:ref:`DrawOrder<enum_Particles_DrawOrder>` **DRAW_ORDER_INDEX** = ``0``

Particles are drawn in the order emitted.

.. _class_Particles_constant_DRAW_ORDER_LIFETIME:

.. rst-class:: classref-enumeration-constant

:ref:`DrawOrder<enum_Particles_DrawOrder>` **DRAW_ORDER_LIFETIME** = ``1``

Particles are drawn in order of remaining lifetime.

.. _class_Particles_constant_DRAW_ORDER_VIEW_DEPTH:

.. rst-class:: classref-enumeration-constant

:ref:`DrawOrder<enum_Particles_DrawOrder>` **DRAW_ORDER_VIEW_DEPTH** = ``2``

Particles are drawn in order of depth.

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

Constants
---------

.. _class_Particles_constant_MAX_DRAW_PASSES:

.. rst-class:: classref-constant

**MAX_DRAW_PASSES** = ``4``

Maximum number of draw passes supported.

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

Property Descriptions
---------------------

.. _class_Particles_property_amount:

.. rst-class:: classref-property

:ref:`int<class_int>` **amount** = ``8``

.. rst-class:: classref-property-setget

- void **set_amount** **(** :ref:`int<class_int>` value **)**
- :ref:`int<class_int>` **get_amount** **(** **)**

The number of particles emitted in one emission cycle (corresponding to the :ref:`lifetime<class_Particles_property_lifetime>`).

\ **Note:** Changing :ref:`amount<class_Particles_property_amount>` will reset the particle emission, therefore removing all particles that were already emitted before changing :ref:`amount<class_Particles_property_amount>`.

.. rst-class:: classref-item-separator

----

.. _class_Particles_property_draw_order:

.. rst-class:: classref-property

:ref:`DrawOrder<enum_Particles_DrawOrder>` **draw_order** = ``0``

.. rst-class:: classref-property-setget

- void **set_draw_order** **(** :ref:`DrawOrder<enum_Particles_DrawOrder>` value **)**
- :ref:`DrawOrder<enum_Particles_DrawOrder>` **get_draw_order** **(** **)**

Particle draw order. Uses :ref:`DrawOrder<enum_Particles_DrawOrder>` values.

.. rst-class:: classref-item-separator

----

.. _class_Particles_property_draw_pass_1:

.. rst-class:: classref-property

:ref:`Mesh<class_Mesh>` **draw_pass_1**

.. rst-class:: classref-property-setget

- void **set_draw_pass_mesh** **(** :ref:`int<class_int>` pass, :ref:`Mesh<class_Mesh>` mesh **)**
- :ref:`Mesh<class_Mesh>` **get_draw_pass_mesh** **(** :ref:`int<class_int>` pass **)** |const|

:ref:`Mesh<class_Mesh>` that is drawn for the first draw pass.

.. rst-class:: classref-item-separator

----

.. _class_Particles_property_draw_pass_2:

.. rst-class:: classref-property

:ref:`Mesh<class_Mesh>` **draw_pass_2**

.. rst-class:: classref-property-setget

- void **set_draw_pass_mesh** **(** :ref:`int<class_int>` pass, :ref:`Mesh<class_Mesh>` mesh **)**
- :ref:`Mesh<class_Mesh>` **get_draw_pass_mesh** **(** :ref:`int<class_int>` pass **)** |const|

:ref:`Mesh<class_Mesh>` that is drawn for the second draw pass.

.. rst-class:: classref-item-separator

----

.. _class_Particles_property_draw_pass_3:

.. rst-class:: classref-property

:ref:`Mesh<class_Mesh>` **draw_pass_3**

.. rst-class:: classref-property-setget

- void **set_draw_pass_mesh** **(** :ref:`int<class_int>` pass, :ref:`Mesh<class_Mesh>` mesh **)**
- :ref:`Mesh<class_Mesh>` **get_draw_pass_mesh** **(** :ref:`int<class_int>` pass **)** |const|

:ref:`Mesh<class_Mesh>` that is drawn for the third draw pass.

.. rst-class:: classref-item-separator

----

.. _class_Particles_property_draw_pass_4:

.. rst-class:: classref-property

:ref:`Mesh<class_Mesh>` **draw_pass_4**

.. rst-class:: classref-property-setget

- void **set_draw_pass_mesh** **(** :ref:`int<class_int>` pass, :ref:`Mesh<class_Mesh>` mesh **)**
- :ref:`Mesh<class_Mesh>` **get_draw_pass_mesh** **(** :ref:`int<class_int>` pass **)** |const|

:ref:`Mesh<class_Mesh>` that is drawn for the fourth draw pass.

.. rst-class:: classref-item-separator

----

.. _class_Particles_property_draw_passes:

.. rst-class:: classref-property

:ref:`int<class_int>` **draw_passes** = ``1``

.. rst-class:: classref-property-setget

- void **set_draw_passes** **(** :ref:`int<class_int>` value **)**
- :ref:`int<class_int>` **get_draw_passes** **(** **)**

The number of draw passes when rendering particles.

.. rst-class:: classref-item-separator

----

.. _class_Particles_property_emitting:

.. rst-class:: classref-property

:ref:`bool<class_bool>` **emitting** = ``true``

.. rst-class:: classref-property-setget

- void **set_emitting** **(** :ref:`bool<class_bool>` value **)**
- :ref:`bool<class_bool>` **is_emitting** **(** **)**

If ``true``, particles are being emitted.

.. rst-class:: classref-item-separator

----

.. _class_Particles_property_explosiveness:

.. rst-class:: classref-property

:ref:`float<class_float>` **explosiveness** = ``0.0``

.. rst-class:: classref-property-setget

- void **set_explosiveness_ratio** **(** :ref:`float<class_float>` value **)**
- :ref:`float<class_float>` **get_explosiveness_ratio** **(** **)**

Time ratio between each emission. If ``0``, particles are emitted continuously. If ``1``, all particles are emitted simultaneously.

.. rst-class:: classref-item-separator

----

.. _class_Particles_property_fixed_fps:

.. rst-class:: classref-property

:ref:`int<class_int>` **fixed_fps** = ``0``

.. rst-class:: classref-property-setget

- void **set_fixed_fps** **(** :ref:`int<class_int>` value **)**
- :ref:`int<class_int>` **get_fixed_fps** **(** **)**

The particle system's frame rate is fixed to a value. For instance, changing the value to 2 will make the particles render at 2 frames per second. Note this does not slow down the simulation of the particle system itself.

.. rst-class:: classref-item-separator

----

.. _class_Particles_property_fract_delta:

.. rst-class:: classref-property

:ref:`bool<class_bool>` **fract_delta** = ``true``

.. rst-class:: classref-property-setget

- void **set_fractional_delta** **(** :ref:`bool<class_bool>` value **)**
- :ref:`bool<class_bool>` **get_fractional_delta** **(** **)**

If ``true``, results in fractional delta calculation which has a smoother particles display effect.

.. rst-class:: classref-item-separator

----

.. _class_Particles_property_lifetime:

.. rst-class:: classref-property

:ref:`float<class_float>` **lifetime** = ``1.0``

.. rst-class:: classref-property-setget

- void **set_lifetime** **(** :ref:`float<class_float>` value **)**
- :ref:`float<class_float>` **get_lifetime** **(** **)**

The amount of time each particle will exist (in seconds).

.. rst-class:: classref-item-separator

----

.. _class_Particles_property_local_coords:

.. rst-class:: classref-property

:ref:`bool<class_bool>` **local_coords** = ``true``

.. rst-class:: classref-property-setget

- void **set_use_local_coordinates** **(** :ref:`bool<class_bool>` value **)**
- :ref:`bool<class_bool>` **get_use_local_coordinates** **(** **)**

If ``true``, particles use the parent node's coordinate space. If ``false``, they use global coordinates.

.. rst-class:: classref-item-separator

----

.. _class_Particles_property_one_shot:

.. rst-class:: classref-property

:ref:`bool<class_bool>` **one_shot** = ``false``

.. rst-class:: classref-property-setget

- void **set_one_shot** **(** :ref:`bool<class_bool>` value **)**
- :ref:`bool<class_bool>` **get_one_shot** **(** **)**

If ``true``, only ``amount`` particles will be emitted.

.. rst-class:: classref-item-separator

----

.. _class_Particles_property_preprocess:

.. rst-class:: classref-property

:ref:`float<class_float>` **preprocess** = ``0.0``

.. rst-class:: classref-property-setget

- void **set_pre_process_time** **(** :ref:`float<class_float>` value **)**
- :ref:`float<class_float>` **get_pre_process_time** **(** **)**

Amount of time to preprocess the particles before animation starts. Lets you start the animation some time after particles have started emitting.

.. rst-class:: classref-item-separator

----

.. _class_Particles_property_process_material:

.. rst-class:: classref-property

:ref:`Material<class_Material>` **process_material**

.. rst-class:: classref-property-setget

- void **set_process_material** **(** :ref:`Material<class_Material>` value **)**
- :ref:`Material<class_Material>` **get_process_material** **(** **)**

:ref:`Material<class_Material>` for processing particles. Can be a :ref:`ParticlesMaterial<class_ParticlesMaterial>` or a :ref:`ShaderMaterial<class_ShaderMaterial>`.

.. rst-class:: classref-item-separator

----

.. _class_Particles_property_randomness:

.. rst-class:: classref-property

:ref:`float<class_float>` **randomness** = ``0.0``

.. rst-class:: classref-property-setget

- void **set_randomness_ratio** **(** :ref:`float<class_float>` value **)**
- :ref:`float<class_float>` **get_randomness_ratio** **(** **)**

Emission randomness ratio.

.. rst-class:: classref-item-separator

----

.. _class_Particles_property_speed_scale:

.. rst-class:: classref-property

:ref:`float<class_float>` **speed_scale** = ``1.0``

.. rst-class:: classref-property-setget

- void **set_speed_scale** **(** :ref:`float<class_float>` value **)**
- :ref:`float<class_float>` **get_speed_scale** **(** **)**

Speed scaling ratio. A value of ``0`` can be used to pause the particles.

.. rst-class:: classref-item-separator

----

.. _class_Particles_property_visibility_aabb:

.. rst-class:: classref-property

:ref:`AABB<class_AABB>` **visibility_aabb** = ``AABB( -4, -4, -4, 8, 8, 8 )``

.. rst-class:: classref-property-setget

- void **set_visibility_aabb** **(** :ref:`AABB<class_AABB>` value **)**
- :ref:`AABB<class_AABB>` **get_visibility_aabb** **(** **)**

The :ref:`AABB<class_AABB>` that determines the node's region which needs to be visible on screen for the particle system to be active.

Grow the box if particles suddenly appear/disappear when the node enters/exits the screen. The :ref:`AABB<class_AABB>` can be grown via code or with the **Particles → Generate AABB** editor tool.

\ **Note:** If the :ref:`ParticlesMaterial<class_ParticlesMaterial>` in use is configured to cast shadows, you may want to enlarge this AABB to ensure the shadow is updated when particles are off-screen.

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

Method Descriptions
-------------------

.. _class_Particles_method_capture_aabb:

.. rst-class:: classref-method

:ref:`AABB<class_AABB>` **capture_aabb** **(** **)** |const|

Returns the axis-aligned bounding box that contains all the particles that are active in the current frame.

.. rst-class:: classref-item-separator

----

.. _class_Particles_method_get_draw_pass_mesh:

.. rst-class:: classref-method

:ref:`Mesh<class_Mesh>` **get_draw_pass_mesh** **(** :ref:`int<class_int>` pass **)** |const|

Returns the :ref:`Mesh<class_Mesh>` that is drawn at index ``pass``.

.. rst-class:: classref-item-separator

----

.. _class_Particles_method_restart:

.. rst-class:: classref-method

void **restart** **(** **)**

Restarts the particle emission, clearing existing particles.

.. rst-class:: classref-item-separator

----

.. _class_Particles_method_set_draw_pass_mesh:

.. rst-class:: classref-method

void **set_draw_pass_mesh** **(** :ref:`int<class_int>` pass, :ref:`Mesh<class_Mesh>` mesh **)**

Sets the :ref:`Mesh<class_Mesh>` that is drawn at index ``pass``.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
.. |static| replace:: :abbr:`static (This method doesn't need an instance to be called, so it can be called directly using the class name.)`
