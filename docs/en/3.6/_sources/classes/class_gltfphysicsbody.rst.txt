:github_url: hide

.. DO NOT EDIT THIS FILE!!!
.. Generated automatically from Redot engine sources.
.. Generator: https://github.com/redot-engine/redot/tree/3.6/doc/tools/make_rst.py.
.. XML source: https://github.com/redot-engine/redot/tree/3.6/modules/gltf/doc_classes/GLTFPhysicsBody.xml.

.. _class_GLTFPhysicsBody:

GLTFPhysicsBody
===============

**Inherits:** :ref:`Resource<class_Resource>` **<** :ref:`Reference<class_Reference>` **<** :ref:`Object<class_Object>`

Represents a GLTF physics body.

.. rst-class:: classref-introduction-group

Description
-----------

Represents a physics body as defined by the ``OMI_physics_body`` GLTF extension. This class is an intermediary between the GLTF data and Redot's nodes, and it's abstracted in a way that allows adding support for different GLTF physics extensions in the future.

.. rst-class:: classref-introduction-group

Tutorials
---------

- `OMI_physics_body GLTF extension <https://github.com/omigroup/gltf-extensions/tree/main/extensions/2.0/OMI_physics_body>`__

.. rst-class:: classref-reftable-group

Properties
----------

.. table::
   :widths: auto

   +-------------------------------+--------------------------------------------------------------------------+------------------------+
   | :ref:`Vector3<class_Vector3>` | :ref:`angular_velocity<class_GLTFPhysicsBody_property_angular_velocity>` | ``Vector3( 0, 0, 0 )`` |
   +-------------------------------+--------------------------------------------------------------------------+------------------------+
   | :ref:`String<class_String>`   | :ref:`body_type<class_GLTFPhysicsBody_property_body_type>`               | ``"static"``           |
   +-------------------------------+--------------------------------------------------------------------------+------------------------+
   | :ref:`Vector3<class_Vector3>` | :ref:`linear_velocity<class_GLTFPhysicsBody_property_linear_velocity>`   | ``Vector3( 0, 0, 0 )`` |
   +-------------------------------+--------------------------------------------------------------------------+------------------------+
   | :ref:`float<class_float>`     | :ref:`mass<class_GLTFPhysicsBody_property_mass>`                         | ``1.0``                |
   +-------------------------------+--------------------------------------------------------------------------+------------------------+

.. rst-class:: classref-reftable-group

Methods
-------

.. table::
   :widths: auto

   +-----------------------------------------------+--------------------------------------------------------------------------------------+
   | :ref:`Dictionary<class_Dictionary>`           | :ref:`to_dictionary<class_GLTFPhysicsBody_method_to_dictionary>` **(** **)** |const| |
   +-----------------------------------------------+--------------------------------------------------------------------------------------+
   | :ref:`CollisionObject<class_CollisionObject>` | :ref:`to_node<class_GLTFPhysicsBody_method_to_node>` **(** **)** |const|             |
   +-----------------------------------------------+--------------------------------------------------------------------------------------+

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

Property Descriptions
---------------------

.. _class_GLTFPhysicsBody_property_angular_velocity:

.. rst-class:: classref-property

:ref:`Vector3<class_Vector3>` **angular_velocity** = ``Vector3( 0, 0, 0 )``

.. rst-class:: classref-property-setget

- void **set_angular_velocity** **(** :ref:`Vector3<class_Vector3>` value **)**
- :ref:`Vector3<class_Vector3>` **get_angular_velocity** **(** **)**

The angular velocity of the physics body, in radians per second. This is only used when the body type is "rigid" or "vehicle".

.. rst-class:: classref-item-separator

----

.. _class_GLTFPhysicsBody_property_body_type:

.. rst-class:: classref-property

:ref:`String<class_String>` **body_type** = ``"static"``

.. rst-class:: classref-property-setget

- void **set_body_type** **(** :ref:`String<class_String>` value **)**
- :ref:`String<class_String>` **get_body_type** **(** **)**

The type of the body. Valid values are "static", "kinematic", "character", "rigid", "vehicle", and "trigger".

.. rst-class:: classref-item-separator

----

.. _class_GLTFPhysicsBody_property_linear_velocity:

.. rst-class:: classref-property

:ref:`Vector3<class_Vector3>` **linear_velocity** = ``Vector3( 0, 0, 0 )``

.. rst-class:: classref-property-setget

- void **set_linear_velocity** **(** :ref:`Vector3<class_Vector3>` value **)**
- :ref:`Vector3<class_Vector3>` **get_linear_velocity** **(** **)**

The linear velocity of the physics body, in meters per second. This is only used when the body type is "rigid" or "vehicle".

.. rst-class:: classref-item-separator

----

.. _class_GLTFPhysicsBody_property_mass:

.. rst-class:: classref-property

:ref:`float<class_float>` **mass** = ``1.0``

.. rst-class:: classref-property-setget

- void **set_mass** **(** :ref:`float<class_float>` value **)**
- :ref:`float<class_float>` **get_mass** **(** **)**

The mass of the physics body, in kilograms. This is only used when the body type is "rigid" or "vehicle".

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

Method Descriptions
-------------------

.. _class_GLTFPhysicsBody_method_to_dictionary:

.. rst-class:: classref-method

:ref:`Dictionary<class_Dictionary>` **to_dictionary** **(** **)** |const|

Serializes this GLTFPhysicsBody instance into a :ref:`Dictionary<class_Dictionary>`.

.. rst-class:: classref-item-separator

----

.. _class_GLTFPhysicsBody_method_to_node:

.. rst-class:: classref-method

:ref:`CollisionObject<class_CollisionObject>` **to_node** **(** **)** |const|

Converts this GLTFPhysicsBody instance into a Redot :ref:`CollisionObject<class_CollisionObject>` node.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
.. |static| replace:: :abbr:`static (This method doesn't need an instance to be called, so it can be called directly using the class name.)`
