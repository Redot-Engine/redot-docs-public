:github_url: hide

.. DO NOT EDIT THIS FILE!!!
.. Generated automatically from Redot engine sources.
.. Generator: https://github.com/redot-engine/redot/tree/3.6/doc/tools/make_rst.py.
.. XML source: https://github.com/redot-engine/redot/tree/3.6/doc/classes/NetworkedMultiplayerPeer.xml.

.. _class_NetworkedMultiplayerPeer:

NetworkedMultiplayerPeer
========================

**Inherits:** :ref:`PacketPeer<class_PacketPeer>` **<** :ref:`Reference<class_Reference>` **<** :ref:`Object<class_Object>`

**Inherited By:** :ref:`MultiplayerPeerGDNative<class_MultiplayerPeerGDNative>`, :ref:`NetworkedMultiplayerCustom<class_NetworkedMultiplayerCustom>`, :ref:`NetworkedMultiplayerENet<class_NetworkedMultiplayerENet>`, :ref:`WebRTCMultiplayer<class_WebRTCMultiplayer>`, :ref:`WebSocketMultiplayerPeer<class_WebSocketMultiplayerPeer>`

A high-level network interface to simplify multiplayer interactions.

.. rst-class:: classref-introduction-group

Description
-----------

Manages the connection to network peers. Assigns unique IDs to each client connected to the server. See also :ref:`MultiplayerAPI<class_MultiplayerAPI>`.

\ **Note:** The high-level multiplayer API protocol is an implementation detail and isn't meant to be used by non-Redot servers. It may change without notice.

.. rst-class:: classref-introduction-group

Tutorials
---------

- :doc:`High-level multiplayer <../tutorials/networking/high_level_multiplayer>`

- `WebRTC Signaling Demo <https://redotengine.org/asset-library/asset/537>`__

.. rst-class:: classref-reftable-group

Properties
----------

.. table::
   :widths: auto

   +-----------------------------------------------------------------+-----------------------------------------------------------------------------------------------+-----------+
   | :ref:`bool<class_bool>`                                         | :ref:`refuse_new_connections<class_NetworkedMultiplayerPeer_property_refuse_new_connections>` | ``false`` |
   +-----------------------------------------------------------------+-----------------------------------------------------------------------------------------------+-----------+
   | :ref:`TransferMode<enum_NetworkedMultiplayerPeer_TransferMode>` | :ref:`transfer_mode<class_NetworkedMultiplayerPeer_property_transfer_mode>`                   | ``2``     |
   +-----------------------------------------------------------------+-----------------------------------------------------------------------------------------------+-----------+

.. rst-class:: classref-reftable-group

Methods
-------

.. table::
   :widths: auto

   +-------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+
   | :ref:`ConnectionStatus<enum_NetworkedMultiplayerPeer_ConnectionStatus>` | :ref:`get_connection_status<class_NetworkedMultiplayerPeer_method_get_connection_status>` **(** **)** |const|      |
   +-------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+
   | :ref:`int<class_int>`                                                   | :ref:`get_packet_peer<class_NetworkedMultiplayerPeer_method_get_packet_peer>` **(** **)** |const|                  |
   +-------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+
   | :ref:`int<class_int>`                                                   | :ref:`get_unique_id<class_NetworkedMultiplayerPeer_method_get_unique_id>` **(** **)** |const|                      |
   +-------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+
   | void                                                                    | :ref:`poll<class_NetworkedMultiplayerPeer_method_poll>` **(** **)**                                                |
   +-------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+
   | void                                                                    | :ref:`set_target_peer<class_NetworkedMultiplayerPeer_method_set_target_peer>` **(** :ref:`int<class_int>` id **)** |
   +-------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

Signals
-------

.. _class_NetworkedMultiplayerPeer_signal_connection_failed:

.. rst-class:: classref-signal

**connection_failed** **(** **)**

Emitted when a connection attempt fails.

.. rst-class:: classref-item-separator

----

.. _class_NetworkedMultiplayerPeer_signal_connection_succeeded:

.. rst-class:: classref-signal

**connection_succeeded** **(** **)**

Emitted when a connection attempt succeeds.

.. rst-class:: classref-item-separator

----

.. _class_NetworkedMultiplayerPeer_signal_peer_connected:

.. rst-class:: classref-signal

**peer_connected** **(** :ref:`int<class_int>` id **)**

Emitted when a remote peer connects.

.. rst-class:: classref-item-separator

----

.. _class_NetworkedMultiplayerPeer_signal_peer_disconnected:

.. rst-class:: classref-signal

**peer_disconnected** **(** :ref:`int<class_int>` id **)**

Emitted when a remote peer has disconnected.

.. rst-class:: classref-item-separator

----

.. _class_NetworkedMultiplayerPeer_signal_server_disconnected:

.. rst-class:: classref-signal

**server_disconnected** **(** **)**

Emitted by clients when the server disconnects.

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

Enumerations
------------

.. _enum_NetworkedMultiplayerPeer_TransferMode:

.. rst-class:: classref-enumeration

enum **TransferMode**:

.. _class_NetworkedMultiplayerPeer_constant_TRANSFER_MODE_UNRELIABLE:

.. rst-class:: classref-enumeration-constant

:ref:`TransferMode<enum_NetworkedMultiplayerPeer_TransferMode>` **TRANSFER_MODE_UNRELIABLE** = ``0``

Packets are not acknowledged, no resend attempts are made for lost packets. Packets may arrive in any order. Potentially faster than :ref:`TRANSFER_MODE_UNRELIABLE_ORDERED<class_NetworkedMultiplayerPeer_constant_TRANSFER_MODE_UNRELIABLE_ORDERED>`. Use for non-critical data, and always consider whether the order matters.

.. _class_NetworkedMultiplayerPeer_constant_TRANSFER_MODE_UNRELIABLE_ORDERED:

.. rst-class:: classref-enumeration-constant

:ref:`TransferMode<enum_NetworkedMultiplayerPeer_TransferMode>` **TRANSFER_MODE_UNRELIABLE_ORDERED** = ``1``

Packets are not acknowledged, no resend attempts are made for lost packets. Packets are received in the order they were sent in. Potentially faster than :ref:`TRANSFER_MODE_RELIABLE<class_NetworkedMultiplayerPeer_constant_TRANSFER_MODE_RELIABLE>`. Use for non-critical data or data that would be outdated if received late due to resend attempt(s) anyway, for example movement and positional data.

.. _class_NetworkedMultiplayerPeer_constant_TRANSFER_MODE_RELIABLE:

.. rst-class:: classref-enumeration-constant

:ref:`TransferMode<enum_NetworkedMultiplayerPeer_TransferMode>` **TRANSFER_MODE_RELIABLE** = ``2``

Packets must be received and resend attempts should be made until the packets are acknowledged. Packets must be received in the order they were sent in. Most reliable transfer mode, but potentially the slowest due to the overhead. Use for critical data that must be transmitted and arrive in order, for example an ability being triggered or a chat message. Consider carefully if the information really is critical, and use sparingly.

.. rst-class:: classref-item-separator

----

.. _enum_NetworkedMultiplayerPeer_ConnectionStatus:

.. rst-class:: classref-enumeration

enum **ConnectionStatus**:

.. _class_NetworkedMultiplayerPeer_constant_CONNECTION_DISCONNECTED:

.. rst-class:: classref-enumeration-constant

:ref:`ConnectionStatus<enum_NetworkedMultiplayerPeer_ConnectionStatus>` **CONNECTION_DISCONNECTED** = ``0``

The ongoing connection disconnected.

.. _class_NetworkedMultiplayerPeer_constant_CONNECTION_CONNECTING:

.. rst-class:: classref-enumeration-constant

:ref:`ConnectionStatus<enum_NetworkedMultiplayerPeer_ConnectionStatus>` **CONNECTION_CONNECTING** = ``1``

A connection attempt is ongoing.

.. _class_NetworkedMultiplayerPeer_constant_CONNECTION_CONNECTED:

.. rst-class:: classref-enumeration-constant

:ref:`ConnectionStatus<enum_NetworkedMultiplayerPeer_ConnectionStatus>` **CONNECTION_CONNECTED** = ``2``

The connection attempt succeeded.

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

Constants
---------

.. _class_NetworkedMultiplayerPeer_constant_TARGET_PEER_BROADCAST:

.. rst-class:: classref-constant

**TARGET_PEER_BROADCAST** = ``0``

Packets are sent to the server and then redistributed to other peers.

.. _class_NetworkedMultiplayerPeer_constant_TARGET_PEER_SERVER:

.. rst-class:: classref-constant

**TARGET_PEER_SERVER** = ``1``

Packets are sent to the server alone.

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

Property Descriptions
---------------------

.. _class_NetworkedMultiplayerPeer_property_refuse_new_connections:

.. rst-class:: classref-property

:ref:`bool<class_bool>` **refuse_new_connections** = ``false``

.. rst-class:: classref-property-setget

- void **set_refuse_new_connections** **(** :ref:`bool<class_bool>` value **)**
- :ref:`bool<class_bool>` **is_refusing_new_connections** **(** **)**

If ``true``, this **NetworkedMultiplayerPeer** refuses new connections.

.. rst-class:: classref-item-separator

----

.. _class_NetworkedMultiplayerPeer_property_transfer_mode:

.. rst-class:: classref-property

:ref:`TransferMode<enum_NetworkedMultiplayerPeer_TransferMode>` **transfer_mode** = ``2``

.. rst-class:: classref-property-setget

- void **set_transfer_mode** **(** :ref:`TransferMode<enum_NetworkedMultiplayerPeer_TransferMode>` value **)**
- :ref:`TransferMode<enum_NetworkedMultiplayerPeer_TransferMode>` **get_transfer_mode** **(** **)**

The manner in which to send packets to the ``target_peer``. See :ref:`TransferMode<enum_NetworkedMultiplayerPeer_TransferMode>`.

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

Method Descriptions
-------------------

.. _class_NetworkedMultiplayerPeer_method_get_connection_status:

.. rst-class:: classref-method

:ref:`ConnectionStatus<enum_NetworkedMultiplayerPeer_ConnectionStatus>` **get_connection_status** **(** **)** |const|

Returns the current state of the connection. See :ref:`ConnectionStatus<enum_NetworkedMultiplayerPeer_ConnectionStatus>`.

.. rst-class:: classref-item-separator

----

.. _class_NetworkedMultiplayerPeer_method_get_packet_peer:

.. rst-class:: classref-method

:ref:`int<class_int>` **get_packet_peer** **(** **)** |const|

Returns the ID of the **NetworkedMultiplayerPeer** who sent the most recent packet.

.. rst-class:: classref-item-separator

----

.. _class_NetworkedMultiplayerPeer_method_get_unique_id:

.. rst-class:: classref-method

:ref:`int<class_int>` **get_unique_id** **(** **)** |const|

Returns the ID of this **NetworkedMultiplayerPeer**.

.. rst-class:: classref-item-separator

----

.. _class_NetworkedMultiplayerPeer_method_poll:

.. rst-class:: classref-method

void **poll** **(** **)**

Waits up to 1 second to receive a new network event.

.. rst-class:: classref-item-separator

----

.. _class_NetworkedMultiplayerPeer_method_set_target_peer:

.. rst-class:: classref-method

void **set_target_peer** **(** :ref:`int<class_int>` id **)**

Sets the peer to which packets will be sent.

The ``id`` can be one of: :ref:`TARGET_PEER_BROADCAST<class_NetworkedMultiplayerPeer_constant_TARGET_PEER_BROADCAST>` to send to all connected peers, :ref:`TARGET_PEER_SERVER<class_NetworkedMultiplayerPeer_constant_TARGET_PEER_SERVER>` to send to the peer acting as server, a valid peer ID to send to that specific peer, a negative peer ID to send to all peers except that one. By default, the target peer is :ref:`TARGET_PEER_BROADCAST<class_NetworkedMultiplayerPeer_constant_TARGET_PEER_BROADCAST>`.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
.. |static| replace:: :abbr:`static (This method doesn't need an instance to be called, so it can be called directly using the class name.)`
