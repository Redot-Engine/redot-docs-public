:github_url: hide

.. DO NOT EDIT THIS FILE!!!
.. Generated automatically from Redot engine sources.
.. Generator: https://github.com/redot-engine/redot/tree/3.6/doc/tools/make_rst.py.
.. XML source: https://github.com/redot-engine/redot/tree/3.6/doc/classes/Viewport.xml.

.. _class_Viewport:

Viewport
========

**Inherits:** :ref:`Node<class_Node>` **<** :ref:`Object<class_Object>`

Creates a sub-view into the screen.

.. rst-class:: classref-introduction-group

Description
-----------

A Viewport creates a different view into the screen, or a sub-view inside another viewport. Children 2D Nodes will display on it, and children Camera 3D nodes will render on it too.

Optionally, a viewport can have its own 2D or 3D world, so they don't share what they draw with other viewports.

If a viewport is a child of a :ref:`ViewportContainer<class_ViewportContainer>`, the viewport will automatically take up the container's size, otherwise it must be set manually.

Viewports can also choose to be audio listeners, so they generate positional audio depending on a 2D or 3D camera child of it.

Also, viewports can be assigned to different screens in case the devices have multiple screens.

Finally, viewports can also behave as render targets, in which case they will not be visible unless the associated texture is used to draw.

\ **Note:** By default, a newly created Viewport in Redot 3.x will appear to be upside down. Enabling :ref:`render_target_v_flip<class_Viewport_property_render_target_v_flip>` will display the Viewport with the correct orientation.

.. rst-class:: classref-introduction-group

Tutorials
---------

- :doc:`Viewport and canvas transforms <../tutorials/2d/2d_transforms>`

- :doc:`Viewports tutorial index <../tutorials/rendering/index>`

- `GUI in 3D Demo <https://redotengine.org/asset-library/asset/127>`__

- `3D in 2D Demo <https://redotengine.org/asset-library/asset/128>`__

- `2D in 3D Demo <https://redotengine.org/asset-library/asset/129>`__

- `Screen Capture Demo <https://redotengine.org/asset-library/asset/130>`__

- `Dynamic Split Screen Demo <https://redotengine.org/asset-library/asset/541>`__

- `3D Viewport Scaling Demo <https://redotengine.org/asset-library/asset/586>`__

.. rst-class:: classref-reftable-group

Properties
----------

.. table::
   :widths: auto

   +---------------------------------------------------------------------------+-----------------------------------------------------------------------------------------+-------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>`                                                   | :ref:`arvr<class_Viewport_property_arvr>`                                               | ``false``                                                                     |
   +---------------------------------------------------------------------------+-----------------------------------------------------------------------------------------+-------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>`                                                   | :ref:`audio_listener_enable_2d<class_Viewport_property_audio_listener_enable_2d>`       | ``false``                                                                     |
   +---------------------------------------------------------------------------+-----------------------------------------------------------------------------------------+-------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>`                                                   | :ref:`audio_listener_enable_3d<class_Viewport_property_audio_listener_enable_3d>`       | ``false``                                                                     |
   +---------------------------------------------------------------------------+-----------------------------------------------------------------------------------------+-------------------------------------------------------------------------------+
   | :ref:`Transform2D<class_Transform2D>`                                     | :ref:`canvas_transform<class_Viewport_property_canvas_transform>`                       |                                                                               |
   +---------------------------------------------------------------------------+-----------------------------------------------------------------------------------------+-------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>`                                                   | :ref:`debanding<class_Viewport_property_debanding>`                                     | ``false``                                                                     |
   +---------------------------------------------------------------------------+-----------------------------------------------------------------------------------------+-------------------------------------------------------------------------------+
   | :ref:`DebugDraw<enum_Viewport_DebugDraw>`                                 | :ref:`debug_draw<class_Viewport_property_debug_draw>`                                   | ``0``                                                                         |
   +---------------------------------------------------------------------------+-----------------------------------------------------------------------------------------+-------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>`                                                   | :ref:`disable_3d<class_Viewport_property_disable_3d>`                                   | ``false``                                                                     |
   +---------------------------------------------------------------------------+-----------------------------------------------------------------------------------------+-------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>`                                                   | :ref:`fxaa<class_Viewport_property_fxaa>`                                               | ``false``                                                                     |
   +---------------------------------------------------------------------------+-----------------------------------------------------------------------------------------+-------------------------------------------------------------------------------+
   | :ref:`Transform2D<class_Transform2D>`                                     | :ref:`global_canvas_transform<class_Viewport_property_global_canvas_transform>`         |                                                                               |
   +---------------------------------------------------------------------------+-----------------------------------------------------------------------------------------+-------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>`                                                   | :ref:`gui_disable_input<class_Viewport_property_gui_disable_input>`                     | ``false``                                                                     |
   +---------------------------------------------------------------------------+-----------------------------------------------------------------------------------------+-------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>`                                                   | :ref:`gui_snap_controls_to_pixels<class_Viewport_property_gui_snap_controls_to_pixels>` | ``true``                                                                      |
   +---------------------------------------------------------------------------+-----------------------------------------------------------------------------------------+-------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>`                                                   | :ref:`handle_input_locally<class_Viewport_property_handle_input_locally>`               | ``true``                                                                      |
   +---------------------------------------------------------------------------+-----------------------------------------------------------------------------------------+-------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>`                                                   | :ref:`hdr<class_Viewport_property_hdr>`                                                 | ``true``                                                                      |
   +---------------------------------------------------------------------------+-----------------------------------------------------------------------------------------+-------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>`                                                   | :ref:`keep_3d_linear<class_Viewport_property_keep_3d_linear>`                           | ``false``                                                                     |
   +---------------------------------------------------------------------------+-----------------------------------------------------------------------------------------+-------------------------------------------------------------------------------+
   | :ref:`MSAA<enum_Viewport_MSAA>`                                           | :ref:`msaa<class_Viewport_property_msaa>`                                               | ``0``                                                                         |
   +---------------------------------------------------------------------------+-----------------------------------------------------------------------------------------+-------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>`                                                   | :ref:`own_world<class_Viewport_property_own_world>`                                     | ``false``                                                                     |
   +---------------------------------------------------------------------------+-----------------------------------------------------------------------------------------+-------------------------------------------------------------------------------+
   | :ref:`PhysicsInterpolationMode<enum_Node_PhysicsInterpolationMode>`       | physics_interpolation_mode                                                              | ``2`` (overrides :ref:`Node<class_Node_property_physics_interpolation_mode>`) |
   +---------------------------------------------------------------------------+-----------------------------------------------------------------------------------------+-------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>`                                                   | :ref:`physics_object_picking<class_Viewport_property_physics_object_picking>`           | ``false``                                                                     |
   +---------------------------------------------------------------------------+-----------------------------------------------------------------------------------------+-------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>`                                                   | :ref:`render_direct_to_screen<class_Viewport_property_render_direct_to_screen>`         | ``false``                                                                     |
   +---------------------------------------------------------------------------+-----------------------------------------------------------------------------------------+-------------------------------------------------------------------------------+
   | :ref:`ClearMode<enum_Viewport_ClearMode>`                                 | :ref:`render_target_clear_mode<class_Viewport_property_render_target_clear_mode>`       | ``0``                                                                         |
   +---------------------------------------------------------------------------+-----------------------------------------------------------------------------------------+-------------------------------------------------------------------------------+
   | :ref:`UpdateMode<enum_Viewport_UpdateMode>`                               | :ref:`render_target_update_mode<class_Viewport_property_render_target_update_mode>`     | ``2``                                                                         |
   +---------------------------------------------------------------------------+-----------------------------------------------------------------------------------------+-------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>`                                                   | :ref:`render_target_v_flip<class_Viewport_property_render_target_v_flip>`               | ``false``                                                                     |
   +---------------------------------------------------------------------------+-----------------------------------------------------------------------------------------+-------------------------------------------------------------------------------+
   | :ref:`ShadowAtlasQuadrantSubdiv<enum_Viewport_ShadowAtlasQuadrantSubdiv>` | :ref:`shadow_atlas_quad_0<class_Viewport_property_shadow_atlas_quad_0>`                 | ``2``                                                                         |
   +---------------------------------------------------------------------------+-----------------------------------------------------------------------------------------+-------------------------------------------------------------------------------+
   | :ref:`ShadowAtlasQuadrantSubdiv<enum_Viewport_ShadowAtlasQuadrantSubdiv>` | :ref:`shadow_atlas_quad_1<class_Viewport_property_shadow_atlas_quad_1>`                 | ``2``                                                                         |
   +---------------------------------------------------------------------------+-----------------------------------------------------------------------------------------+-------------------------------------------------------------------------------+
   | :ref:`ShadowAtlasQuadrantSubdiv<enum_Viewport_ShadowAtlasQuadrantSubdiv>` | :ref:`shadow_atlas_quad_2<class_Viewport_property_shadow_atlas_quad_2>`                 | ``3``                                                                         |
   +---------------------------------------------------------------------------+-----------------------------------------------------------------------------------------+-------------------------------------------------------------------------------+
   | :ref:`ShadowAtlasQuadrantSubdiv<enum_Viewport_ShadowAtlasQuadrantSubdiv>` | :ref:`shadow_atlas_quad_3<class_Viewport_property_shadow_atlas_quad_3>`                 | ``4``                                                                         |
   +---------------------------------------------------------------------------+-----------------------------------------------------------------------------------------+-------------------------------------------------------------------------------+
   | :ref:`int<class_int>`                                                     | :ref:`shadow_atlas_size<class_Viewport_property_shadow_atlas_size>`                     | ``0``                                                                         |
   +---------------------------------------------------------------------------+-----------------------------------------------------------------------------------------+-------------------------------------------------------------------------------+
   | :ref:`float<class_float>`                                                 | :ref:`sharpen_intensity<class_Viewport_property_sharpen_intensity>`                     | ``0.0``                                                                       |
   +---------------------------------------------------------------------------+-----------------------------------------------------------------------------------------+-------------------------------------------------------------------------------+
   | :ref:`Vector2<class_Vector2>`                                             | :ref:`size<class_Viewport_property_size>`                                               | ``Vector2( 0, 0 )``                                                           |
   +---------------------------------------------------------------------------+-----------------------------------------------------------------------------------------+-------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>`                                                   | :ref:`size_override_stretch<class_Viewport_property_size_override_stretch>`             | ``false``                                                                     |
   +---------------------------------------------------------------------------+-----------------------------------------------------------------------------------------+-------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>`                                                   | :ref:`transparent_bg<class_Viewport_property_transparent_bg>`                           | ``false``                                                                     |
   +---------------------------------------------------------------------------+-----------------------------------------------------------------------------------------+-------------------------------------------------------------------------------+
   | :ref:`Usage<enum_Viewport_Usage>`                                         | :ref:`usage<class_Viewport_property_usage>`                                             | ``2``                                                                         |
   +---------------------------------------------------------------------------+-----------------------------------------------------------------------------------------+-------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>`                                                   | :ref:`use_32_bpc_depth<class_Viewport_property_use_32_bpc_depth>`                       | ``false``                                                                     |
   +---------------------------------------------------------------------------+-----------------------------------------------------------------------------------------+-------------------------------------------------------------------------------+
   | :ref:`World<class_World>`                                                 | :ref:`world<class_Viewport_property_world>`                                             |                                                                               |
   +---------------------------------------------------------------------------+-----------------------------------------------------------------------------------------+-------------------------------------------------------------------------------+
   | :ref:`World2D<class_World2D>`                                             | :ref:`world_2d<class_Viewport_property_world_2d>`                                       |                                                                               |
   +---------------------------------------------------------------------------+-----------------------------------------------------------------------------------------+-------------------------------------------------------------------------------+

.. rst-class:: classref-reftable-group

Methods
-------

.. table::
   :widths: auto

   +---------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`World<class_World>`                                                 | :ref:`find_world<class_Viewport_method_find_world>` **(** **)** |const|                                                                                                                                                      |
   +---------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`World2D<class_World2D>`                                             | :ref:`find_world_2d<class_Viewport_method_find_world_2d>` **(** **)** |const|                                                                                                                                                |
   +---------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`Camera<class_Camera>`                                               | :ref:`get_camera<class_Viewport_method_get_camera>` **(** **)** |const|                                                                                                                                                      |
   +---------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`Transform2D<class_Transform2D>`                                     | :ref:`get_final_transform<class_Viewport_method_get_final_transform>` **(** **)** |const|                                                                                                                                    |
   +---------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`Control<class_Control>`                                             | :ref:`get_modal_stack_top<class_Viewport_method_get_modal_stack_top>` **(** **)** |const|                                                                                                                                    |
   +---------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`Vector2<class_Vector2>`                                             | :ref:`get_mouse_position<class_Viewport_method_get_mouse_position>` **(** **)** |const|                                                                                                                                      |
   +---------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`int<class_int>`                                                     | :ref:`get_render_info<class_Viewport_method_get_render_info>` **(** :ref:`RenderInfo<enum_Viewport_RenderInfo>` info **)**                                                                                                   |
   +---------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`ShadowAtlasQuadrantSubdiv<enum_Viewport_ShadowAtlasQuadrantSubdiv>` | :ref:`get_shadow_atlas_quadrant_subdiv<class_Viewport_method_get_shadow_atlas_quadrant_subdiv>` **(** :ref:`int<class_int>` quadrant **)** |const|                                                                           |
   +---------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`Vector2<class_Vector2>`                                             | :ref:`get_size_override<class_Viewport_method_get_size_override>` **(** **)** |const|                                                                                                                                        |
   +---------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`ViewportTexture<class_ViewportTexture>`                             | :ref:`get_texture<class_Viewport_method_get_texture>` **(** **)** |const|                                                                                                                                                    |
   +---------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`RID<class_RID>`                                                     | :ref:`get_viewport_rid<class_Viewport_method_get_viewport_rid>` **(** **)** |const|                                                                                                                                          |
   +---------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`Rect2<class_Rect2>`                                                 | :ref:`get_visible_rect<class_Viewport_method_get_visible_rect>` **(** **)** |const|                                                                                                                                          |
   +---------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`Variant<class_Variant>`                                             | :ref:`gui_get_drag_data<class_Viewport_method_gui_get_drag_data>` **(** **)** |const|                                                                                                                                        |
   +---------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>`                                                   | :ref:`gui_has_modal_stack<class_Viewport_method_gui_has_modal_stack>` **(** **)** |const|                                                                                                                                    |
   +---------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>`                                                   | :ref:`gui_is_drag_successful<class_Viewport_method_gui_is_drag_successful>` **(** **)** |const|                                                                                                                              |
   +---------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>`                                                   | :ref:`gui_is_dragging<class_Viewport_method_gui_is_dragging>` **(** **)** |const|                                                                                                                                            |
   +---------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                                                      | :ref:`input<class_Viewport_method_input>` **(** :ref:`InputEvent<class_InputEvent>` local_event **)**                                                                                                                        |
   +---------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>`                                                   | :ref:`is_input_handled<class_Viewport_method_is_input_handled>` **(** **)** |const|                                                                                                                                          |
   +---------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>`                                                   | :ref:`is_size_override_enabled<class_Viewport_method_is_size_override_enabled>` **(** **)** |const|                                                                                                                          |
   +---------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                                                      | :ref:`set_attach_to_screen_rect<class_Viewport_method_set_attach_to_screen_rect>` **(** :ref:`Rect2<class_Rect2>` rect **)**                                                                                                 |
   +---------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                                                      | :ref:`set_input_as_handled<class_Viewport_method_set_input_as_handled>` **(** **)**                                                                                                                                          |
   +---------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                                                      | :ref:`set_shadow_atlas_quadrant_subdiv<class_Viewport_method_set_shadow_atlas_quadrant_subdiv>` **(** :ref:`int<class_int>` quadrant, :ref:`ShadowAtlasQuadrantSubdiv<enum_Viewport_ShadowAtlasQuadrantSubdiv>` subdiv **)** |
   +---------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                                                      | :ref:`set_size_override<class_Viewport_method_set_size_override>` **(** :ref:`bool<class_bool>` enable, :ref:`Vector2<class_Vector2>` size=Vector2( -1, -1 ), :ref:`Vector2<class_Vector2>` margin=Vector2( 0, 0 ) **)**     |
   +---------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                                                      | :ref:`unhandled_input<class_Viewport_method_unhandled_input>` **(** :ref:`InputEvent<class_InputEvent>` local_event **)**                                                                                                    |
   +---------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                                                      | :ref:`update_worlds<class_Viewport_method_update_worlds>` **(** **)**                                                                                                                                                        |
   +---------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                                                      | :ref:`warp_mouse<class_Viewport_method_warp_mouse>` **(** :ref:`Vector2<class_Vector2>` to_position **)**                                                                                                                    |
   +---------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

Signals
-------

.. _class_Viewport_signal_gui_focus_changed:

.. rst-class:: classref-signal

**gui_focus_changed** **(** :ref:`Control<class_Control>` node **)**

Emitted when a Control node grabs keyboard focus.

.. rst-class:: classref-item-separator

----

.. _class_Viewport_signal_size_changed:

.. rst-class:: classref-signal

**size_changed** **(** **)**

Emitted when the size of the viewport is changed, whether by :ref:`set_size_override<class_Viewport_method_set_size_override>`, resize of window, or some other means.

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

Enumerations
------------

.. _enum_Viewport_UpdateMode:

.. rst-class:: classref-enumeration

enum **UpdateMode**:

.. _class_Viewport_constant_UPDATE_DISABLED:

.. rst-class:: classref-enumeration-constant

:ref:`UpdateMode<enum_Viewport_UpdateMode>` **UPDATE_DISABLED** = ``0``

Do not update the render target.

.. _class_Viewport_constant_UPDATE_ONCE:

.. rst-class:: classref-enumeration-constant

:ref:`UpdateMode<enum_Viewport_UpdateMode>` **UPDATE_ONCE** = ``1``

Update the render target once, then switch to :ref:`UPDATE_DISABLED<class_Viewport_constant_UPDATE_DISABLED>`.

.. _class_Viewport_constant_UPDATE_WHEN_VISIBLE:

.. rst-class:: classref-enumeration-constant

:ref:`UpdateMode<enum_Viewport_UpdateMode>` **UPDATE_WHEN_VISIBLE** = ``2``

Update the render target only when it is visible. This is the default value.

.. _class_Viewport_constant_UPDATE_ALWAYS:

.. rst-class:: classref-enumeration-constant

:ref:`UpdateMode<enum_Viewport_UpdateMode>` **UPDATE_ALWAYS** = ``3``

Always update the render target.

.. rst-class:: classref-item-separator

----

.. _enum_Viewport_ShadowAtlasQuadrantSubdiv:

.. rst-class:: classref-enumeration

enum **ShadowAtlasQuadrantSubdiv**:

.. _class_Viewport_constant_SHADOW_ATLAS_QUADRANT_SUBDIV_DISABLED:

.. rst-class:: classref-enumeration-constant

:ref:`ShadowAtlasQuadrantSubdiv<enum_Viewport_ShadowAtlasQuadrantSubdiv>` **SHADOW_ATLAS_QUADRANT_SUBDIV_DISABLED** = ``0``

This quadrant will not be used.

.. _class_Viewport_constant_SHADOW_ATLAS_QUADRANT_SUBDIV_1:

.. rst-class:: classref-enumeration-constant

:ref:`ShadowAtlasQuadrantSubdiv<enum_Viewport_ShadowAtlasQuadrantSubdiv>` **SHADOW_ATLAS_QUADRANT_SUBDIV_1** = ``1``

This quadrant will only be used by one shadow map.

.. _class_Viewport_constant_SHADOW_ATLAS_QUADRANT_SUBDIV_4:

.. rst-class:: classref-enumeration-constant

:ref:`ShadowAtlasQuadrantSubdiv<enum_Viewport_ShadowAtlasQuadrantSubdiv>` **SHADOW_ATLAS_QUADRANT_SUBDIV_4** = ``2``

This quadrant will be split in 4 and used by up to 4 shadow maps.

.. _class_Viewport_constant_SHADOW_ATLAS_QUADRANT_SUBDIV_16:

.. rst-class:: classref-enumeration-constant

:ref:`ShadowAtlasQuadrantSubdiv<enum_Viewport_ShadowAtlasQuadrantSubdiv>` **SHADOW_ATLAS_QUADRANT_SUBDIV_16** = ``3``

This quadrant will be split 16 ways and used by up to 16 shadow maps.

.. _class_Viewport_constant_SHADOW_ATLAS_QUADRANT_SUBDIV_64:

.. rst-class:: classref-enumeration-constant

:ref:`ShadowAtlasQuadrantSubdiv<enum_Viewport_ShadowAtlasQuadrantSubdiv>` **SHADOW_ATLAS_QUADRANT_SUBDIV_64** = ``4``

This quadrant will be split 64 ways and used by up to 64 shadow maps.

.. _class_Viewport_constant_SHADOW_ATLAS_QUADRANT_SUBDIV_256:

.. rst-class:: classref-enumeration-constant

:ref:`ShadowAtlasQuadrantSubdiv<enum_Viewport_ShadowAtlasQuadrantSubdiv>` **SHADOW_ATLAS_QUADRANT_SUBDIV_256** = ``5``

This quadrant will be split 256 ways and used by up to 256 shadow maps. Unless the :ref:`shadow_atlas_size<class_Viewport_property_shadow_atlas_size>` is very high, the shadows in this quadrant will be very low resolution.

.. _class_Viewport_constant_SHADOW_ATLAS_QUADRANT_SUBDIV_1024:

.. rst-class:: classref-enumeration-constant

:ref:`ShadowAtlasQuadrantSubdiv<enum_Viewport_ShadowAtlasQuadrantSubdiv>` **SHADOW_ATLAS_QUADRANT_SUBDIV_1024** = ``6``

This quadrant will be split 1024 ways and used by up to 1024 shadow maps. Unless the :ref:`shadow_atlas_size<class_Viewport_property_shadow_atlas_size>` is very high, the shadows in this quadrant will be very low resolution.

.. _class_Viewport_constant_SHADOW_ATLAS_QUADRANT_SUBDIV_MAX:

.. rst-class:: classref-enumeration-constant

:ref:`ShadowAtlasQuadrantSubdiv<enum_Viewport_ShadowAtlasQuadrantSubdiv>` **SHADOW_ATLAS_QUADRANT_SUBDIV_MAX** = ``7``

Represents the size of the :ref:`ShadowAtlasQuadrantSubdiv<enum_Viewport_ShadowAtlasQuadrantSubdiv>` enum.

.. rst-class:: classref-item-separator

----

.. _enum_Viewport_RenderInfo:

.. rst-class:: classref-enumeration

enum **RenderInfo**:

.. _class_Viewport_constant_RENDER_INFO_OBJECTS_IN_FRAME:

.. rst-class:: classref-enumeration-constant

:ref:`RenderInfo<enum_Viewport_RenderInfo>` **RENDER_INFO_OBJECTS_IN_FRAME** = ``0``

Amount of objects in frame.

.. _class_Viewport_constant_RENDER_INFO_VERTICES_IN_FRAME:

.. rst-class:: classref-enumeration-constant

:ref:`RenderInfo<enum_Viewport_RenderInfo>` **RENDER_INFO_VERTICES_IN_FRAME** = ``1``

Amount of vertices in frame.

.. _class_Viewport_constant_RENDER_INFO_MATERIAL_CHANGES_IN_FRAME:

.. rst-class:: classref-enumeration-constant

:ref:`RenderInfo<enum_Viewport_RenderInfo>` **RENDER_INFO_MATERIAL_CHANGES_IN_FRAME** = ``2``

Amount of material changes in frame.

.. _class_Viewport_constant_RENDER_INFO_SHADER_CHANGES_IN_FRAME:

.. rst-class:: classref-enumeration-constant

:ref:`RenderInfo<enum_Viewport_RenderInfo>` **RENDER_INFO_SHADER_CHANGES_IN_FRAME** = ``3``

Amount of shader changes in frame.

.. _class_Viewport_constant_RENDER_INFO_SURFACE_CHANGES_IN_FRAME:

.. rst-class:: classref-enumeration-constant

:ref:`RenderInfo<enum_Viewport_RenderInfo>` **RENDER_INFO_SURFACE_CHANGES_IN_FRAME** = ``4``

Amount of surface changes in frame.

.. _class_Viewport_constant_RENDER_INFO_DRAW_CALLS_IN_FRAME:

.. rst-class:: classref-enumeration-constant

:ref:`RenderInfo<enum_Viewport_RenderInfo>` **RENDER_INFO_DRAW_CALLS_IN_FRAME** = ``5``

Amount of draw calls in frame.

.. _class_Viewport_constant_RENDER_INFO_2D_ITEMS_IN_FRAME:

.. rst-class:: classref-enumeration-constant

:ref:`RenderInfo<enum_Viewport_RenderInfo>` **RENDER_INFO_2D_ITEMS_IN_FRAME** = ``6``

Amount of items or joined items in frame.

.. _class_Viewport_constant_RENDER_INFO_2D_DRAW_CALLS_IN_FRAME:

.. rst-class:: classref-enumeration-constant

:ref:`RenderInfo<enum_Viewport_RenderInfo>` **RENDER_INFO_2D_DRAW_CALLS_IN_FRAME** = ``7``

Amount of draw calls in frame.

.. _class_Viewport_constant_RENDER_INFO_MAX:

.. rst-class:: classref-enumeration-constant

:ref:`RenderInfo<enum_Viewport_RenderInfo>` **RENDER_INFO_MAX** = ``8``

Represents the size of the :ref:`RenderInfo<enum_Viewport_RenderInfo>` enum.

.. rst-class:: classref-item-separator

----

.. _enum_Viewport_DebugDraw:

.. rst-class:: classref-enumeration

enum **DebugDraw**:

.. _class_Viewport_constant_DEBUG_DRAW_DISABLED:

.. rst-class:: classref-enumeration-constant

:ref:`DebugDraw<enum_Viewport_DebugDraw>` **DEBUG_DRAW_DISABLED** = ``0``

Objects are displayed normally.

.. _class_Viewport_constant_DEBUG_DRAW_UNSHADED:

.. rst-class:: classref-enumeration-constant

:ref:`DebugDraw<enum_Viewport_DebugDraw>` **DEBUG_DRAW_UNSHADED** = ``1``

Objects are displayed without light information.

.. _class_Viewport_constant_DEBUG_DRAW_OVERDRAW:

.. rst-class:: classref-enumeration-constant

:ref:`DebugDraw<enum_Viewport_DebugDraw>` **DEBUG_DRAW_OVERDRAW** = ``2``

Objected are displayed semi-transparent with additive blending so you can see where they intersect.

.. _class_Viewport_constant_DEBUG_DRAW_WIREFRAME:

.. rst-class:: classref-enumeration-constant

:ref:`DebugDraw<enum_Viewport_DebugDraw>` **DEBUG_DRAW_WIREFRAME** = ``3``

Objects are displayed in wireframe style.

.. rst-class:: classref-item-separator

----

.. _enum_Viewport_MSAA:

.. rst-class:: classref-enumeration

enum **MSAA**:

.. _class_Viewport_constant_MSAA_DISABLED:

.. rst-class:: classref-enumeration-constant

:ref:`MSAA<enum_Viewport_MSAA>` **MSAA_DISABLED** = ``0``

Multisample anti-aliasing mode disabled. This is the default value.

.. _class_Viewport_constant_MSAA_2X:

.. rst-class:: classref-enumeration-constant

:ref:`MSAA<enum_Viewport_MSAA>` **MSAA_2X** = ``1``

Use 2x Multisample Antialiasing.

.. _class_Viewport_constant_MSAA_4X:

.. rst-class:: classref-enumeration-constant

:ref:`MSAA<enum_Viewport_MSAA>` **MSAA_4X** = ``2``

Use 4x Multisample Antialiasing.

.. _class_Viewport_constant_MSAA_8X:

.. rst-class:: classref-enumeration-constant

:ref:`MSAA<enum_Viewport_MSAA>` **MSAA_8X** = ``3``

Use 8x Multisample Antialiasing. Likely unsupported on low-end and older hardware.

.. _class_Viewport_constant_MSAA_16X:

.. rst-class:: classref-enumeration-constant

:ref:`MSAA<enum_Viewport_MSAA>` **MSAA_16X** = ``4``

Use 16x Multisample Antialiasing. Likely unsupported on medium and low-end hardware.

.. rst-class:: classref-item-separator

----

.. _enum_Viewport_Usage:

.. rst-class:: classref-enumeration

enum **Usage**:

.. _class_Viewport_constant_USAGE_2D:

.. rst-class:: classref-enumeration-constant

:ref:`Usage<enum_Viewport_Usage>` **USAGE_2D** = ``0``

Allocates all buffers needed for drawing 2D scenes. This takes less VRAM than the 3D usage modes. Note that 3D rendering effects such as glow and HDR are not available when using this mode.

.. _class_Viewport_constant_USAGE_2D_NO_SAMPLING:

.. rst-class:: classref-enumeration-constant

:ref:`Usage<enum_Viewport_Usage>` **USAGE_2D_NO_SAMPLING** = ``1``

Allocates buffers needed for 2D scenes without allocating a buffer for screen copy. Accordingly, you cannot read from the screen. Of the :ref:`Usage<enum_Viewport_Usage>` types, this requires the least VRAM. Note that 3D rendering effects such as glow and HDR are not available when using this mode.

.. _class_Viewport_constant_USAGE_3D:

.. rst-class:: classref-enumeration-constant

:ref:`Usage<enum_Viewport_Usage>` **USAGE_3D** = ``2``

Allocates full buffers for drawing 3D scenes and all 3D effects including buffers needed for 2D scenes and effects.

.. _class_Viewport_constant_USAGE_3D_NO_EFFECTS:

.. rst-class:: classref-enumeration-constant

:ref:`Usage<enum_Viewport_Usage>` **USAGE_3D_NO_EFFECTS** = ``3``

Allocates buffers needed for drawing 3D scenes. But does not allocate buffers needed for reading from the screen and post-processing effects. Saves some VRAM.

.. rst-class:: classref-item-separator

----

.. _enum_Viewport_ClearMode:

.. rst-class:: classref-enumeration

enum **ClearMode**:

.. _class_Viewport_constant_CLEAR_MODE_ALWAYS:

.. rst-class:: classref-enumeration-constant

:ref:`ClearMode<enum_Viewport_ClearMode>` **CLEAR_MODE_ALWAYS** = ``0``

Always clear the render target before drawing.

.. _class_Viewport_constant_CLEAR_MODE_NEVER:

.. rst-class:: classref-enumeration-constant

:ref:`ClearMode<enum_Viewport_ClearMode>` **CLEAR_MODE_NEVER** = ``1``

Never clear the render target.

.. _class_Viewport_constant_CLEAR_MODE_ONLY_NEXT_FRAME:

.. rst-class:: classref-enumeration-constant

:ref:`ClearMode<enum_Viewport_ClearMode>` **CLEAR_MODE_ONLY_NEXT_FRAME** = ``2``

Clear the render target next frame, then switch to :ref:`CLEAR_MODE_NEVER<class_Viewport_constant_CLEAR_MODE_NEVER>`.

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

Property Descriptions
---------------------

.. _class_Viewport_property_arvr:

.. rst-class:: classref-property

:ref:`bool<class_bool>` **arvr** = ``false``

.. rst-class:: classref-property-setget

- void **set_use_arvr** **(** :ref:`bool<class_bool>` value **)**
- :ref:`bool<class_bool>` **use_arvr** **(** **)**

If ``true``, the viewport will be used in AR/VR process.

.. rst-class:: classref-item-separator

----

.. _class_Viewport_property_audio_listener_enable_2d:

.. rst-class:: classref-property

:ref:`bool<class_bool>` **audio_listener_enable_2d** = ``false``

.. rst-class:: classref-property-setget

- void **set_as_audio_listener_2d** **(** :ref:`bool<class_bool>` value **)**
- :ref:`bool<class_bool>` **is_audio_listener_2d** **(** **)**

If ``true``, the viewport will process 2D audio streams.

.. rst-class:: classref-item-separator

----

.. _class_Viewport_property_audio_listener_enable_3d:

.. rst-class:: classref-property

:ref:`bool<class_bool>` **audio_listener_enable_3d** = ``false``

.. rst-class:: classref-property-setget

- void **set_as_audio_listener** **(** :ref:`bool<class_bool>` value **)**
- :ref:`bool<class_bool>` **is_audio_listener** **(** **)**

If ``true``, the viewport will process 3D audio streams.

.. rst-class:: classref-item-separator

----

.. _class_Viewport_property_canvas_transform:

.. rst-class:: classref-property

:ref:`Transform2D<class_Transform2D>` **canvas_transform**

.. rst-class:: classref-property-setget

- void **set_canvas_transform** **(** :ref:`Transform2D<class_Transform2D>` value **)**
- :ref:`Transform2D<class_Transform2D>` **get_canvas_transform** **(** **)**

The canvas transform of the viewport, useful for changing the on-screen positions of all child :ref:`CanvasItem<class_CanvasItem>`\ s. This is relative to the global canvas transform of the viewport.

.. rst-class:: classref-item-separator

----

.. _class_Viewport_property_debanding:

.. rst-class:: classref-property

:ref:`bool<class_bool>` **debanding** = ``false``

.. rst-class:: classref-property-setget

- void **set_use_debanding** **(** :ref:`bool<class_bool>` value **)**
- :ref:`bool<class_bool>` **get_use_debanding** **(** **)**

If ``true``, uses a fast post-processing filter to make banding significantly less visible in 3D. 2D rendering is *not* affected by debanding unless the :ref:`Environment.background_mode<class_Environment_property_background_mode>` is :ref:`Environment.BG_CANVAS<class_Environment_constant_BG_CANVAS>`. In this case, :ref:`usage<class_Viewport_property_usage>` must also be set to :ref:`USAGE_3D<class_Viewport_constant_USAGE_3D>`. See also :ref:`ProjectSettings.rendering/quality/filters/use_debanding<class_ProjectSettings_property_rendering/quality/filters/use_debanding>`.

In some cases, debanding may introduce a slightly noticeable dithering pattern. It's recommended to enable debanding only when actually needed since the dithering pattern will make lossless-compressed screenshots larger.

\ **Note:** Only available on the GLES3 backend. :ref:`hdr<class_Viewport_property_hdr>` must also be ``true`` for debanding to be effective.

.. rst-class:: classref-item-separator

----

.. _class_Viewport_property_debug_draw:

.. rst-class:: classref-property

:ref:`DebugDraw<enum_Viewport_DebugDraw>` **debug_draw** = ``0``

.. rst-class:: classref-property-setget

- void **set_debug_draw** **(** :ref:`DebugDraw<enum_Viewport_DebugDraw>` value **)**
- :ref:`DebugDraw<enum_Viewport_DebugDraw>` **get_debug_draw** **(** **)**

The overlay mode for test rendered geometry in debug purposes.

.. rst-class:: classref-item-separator

----

.. _class_Viewport_property_disable_3d:

.. rst-class:: classref-property

:ref:`bool<class_bool>` **disable_3d** = ``false``

.. rst-class:: classref-property-setget

- void **set_disable_3d** **(** :ref:`bool<class_bool>` value **)**
- :ref:`bool<class_bool>` **is_3d_disabled** **(** **)**

If ``true``, the viewport will disable 3D rendering. To actually disable allocation of 3D buffers, set :ref:`usage<class_Viewport_property_usage>` instead.

.. rst-class:: classref-item-separator

----

.. _class_Viewport_property_fxaa:

.. rst-class:: classref-property

:ref:`bool<class_bool>` **fxaa** = ``false``

.. rst-class:: classref-property-setget

- void **set_use_fxaa** **(** :ref:`bool<class_bool>` value **)**
- :ref:`bool<class_bool>` **get_use_fxaa** **(** **)**

Enables fast approximate antialiasing. FXAA is a popular screen-space antialiasing method, which is fast but will make the image look blurry, especially at lower resolutions. It can still work relatively well at large resolutions such as 1440p and 4K. Some of the lost sharpness can be recovered by enabling contrast-adaptive sharpening (see :ref:`sharpen_intensity<class_Viewport_property_sharpen_intensity>`).

.. rst-class:: classref-item-separator

----

.. _class_Viewport_property_global_canvas_transform:

.. rst-class:: classref-property

:ref:`Transform2D<class_Transform2D>` **global_canvas_transform**

.. rst-class:: classref-property-setget

- void **set_global_canvas_transform** **(** :ref:`Transform2D<class_Transform2D>` value **)**
- :ref:`Transform2D<class_Transform2D>` **get_global_canvas_transform** **(** **)**

The global canvas transform of the viewport. The canvas transform is relative to this.

.. rst-class:: classref-item-separator

----

.. _class_Viewport_property_gui_disable_input:

.. rst-class:: classref-property

:ref:`bool<class_bool>` **gui_disable_input** = ``false``

.. rst-class:: classref-property-setget

- void **set_disable_input** **(** :ref:`bool<class_bool>` value **)**
- :ref:`bool<class_bool>` **is_input_disabled** **(** **)**

If ``true``, the viewport will not receive input events.

.. rst-class:: classref-item-separator

----

.. _class_Viewport_property_gui_snap_controls_to_pixels:

.. rst-class:: classref-property

:ref:`bool<class_bool>` **gui_snap_controls_to_pixels** = ``true``

.. rst-class:: classref-property-setget

- void **set_snap_controls_to_pixels** **(** :ref:`bool<class_bool>` value **)**
- :ref:`bool<class_bool>` **is_snap_controls_to_pixels_enabled** **(** **)**

If ``true``, the GUI controls on the viewport will lay pixel perfectly.

.. rst-class:: classref-item-separator

----

.. _class_Viewport_property_handle_input_locally:

.. rst-class:: classref-property

:ref:`bool<class_bool>` **handle_input_locally** = ``true``

.. rst-class:: classref-property-setget

- void **set_handle_input_locally** **(** :ref:`bool<class_bool>` value **)**
- :ref:`bool<class_bool>` **is_handling_input_locally** **(** **)**

.. container:: contribute

	There is currently no description for this property. Please help us by :ref:`contributing one <doc_updating_the_class_reference>`!

.. rst-class:: classref-item-separator

----

.. _class_Viewport_property_hdr:

.. rst-class:: classref-property

:ref:`bool<class_bool>` **hdr** = ``true``

.. rst-class:: classref-property-setget

- void **set_hdr** **(** :ref:`bool<class_bool>` value **)**
- :ref:`bool<class_bool>` **get_hdr** **(** **)**

If ``true``, the viewport rendering will receive benefits from High Dynamic Range algorithm. High Dynamic Range allows the viewport to receive values that are outside the 0-1 range. In Redot, HDR uses half floating-point precision (16-bit) by default. To use full floating-point precision (32-bit), enable :ref:`use_32_bpc_depth<class_Viewport_property_use_32_bpc_depth>`.

\ **Note:** Requires :ref:`usage<class_Viewport_property_usage>` to be set to :ref:`USAGE_3D<class_Viewport_constant_USAGE_3D>` or :ref:`USAGE_3D_NO_EFFECTS<class_Viewport_constant_USAGE_3D_NO_EFFECTS>`, since HDR is not supported for 2D.

\ **Note:** Only available on the GLES3 backend.

.. rst-class:: classref-item-separator

----

.. _class_Viewport_property_keep_3d_linear:

.. rst-class:: classref-property

:ref:`bool<class_bool>` **keep_3d_linear** = ``false``

.. rst-class:: classref-property-setget

- void **set_keep_3d_linear** **(** :ref:`bool<class_bool>` value **)**
- :ref:`bool<class_bool>` **get_keep_3d_linear** **(** **)**

If ``true``, the result after 3D rendering will not have a linear to sRGB color conversion applied. This is important when the viewport is used as a render target where the result is used as a texture on a 3D object rendered in another viewport. It is also important if the viewport is used to create data that is not color based (noise, heightmaps, pickmaps, etc.). Do not enable this when the viewport is used as a texture on a 2D object or if the viewport is your final output. For the GLES2 driver this will convert the sRGB output to linear, this should only be used for VR plugins that require input in linear color space!

.. rst-class:: classref-item-separator

----

.. _class_Viewport_property_msaa:

.. rst-class:: classref-property

:ref:`MSAA<enum_Viewport_MSAA>` **msaa** = ``0``

.. rst-class:: classref-property-setget

- void **set_msaa** **(** :ref:`MSAA<enum_Viewport_MSAA>` value **)**
- :ref:`MSAA<enum_Viewport_MSAA>` **get_msaa** **(** **)**

The multisample anti-aliasing mode. A higher number results in smoother edges at the cost of significantly worse performance. A value of 4 is best unless targeting very high-end systems.

.. rst-class:: classref-item-separator

----

.. _class_Viewport_property_own_world:

.. rst-class:: classref-property

:ref:`bool<class_bool>` **own_world** = ``false``

.. rst-class:: classref-property-setget

- void **set_use_own_world** **(** :ref:`bool<class_bool>` value **)**
- :ref:`bool<class_bool>` **is_using_own_world** **(** **)**

If ``true``, the viewport will use a unique copy of the :ref:`World<class_World>` defined in :ref:`world<class_Viewport_property_world>`.

.. rst-class:: classref-item-separator

----

.. _class_Viewport_property_physics_object_picking:

.. rst-class:: classref-property

:ref:`bool<class_bool>` **physics_object_picking** = ``false``

.. rst-class:: classref-property-setget

- void **set_physics_object_picking** **(** :ref:`bool<class_bool>` value **)**
- :ref:`bool<class_bool>` **get_physics_object_picking** **(** **)**

If ``true``, the objects rendered by viewport become subjects of mouse picking process.

.. rst-class:: classref-item-separator

----

.. _class_Viewport_property_render_direct_to_screen:

.. rst-class:: classref-property

:ref:`bool<class_bool>` **render_direct_to_screen** = ``false``

.. rst-class:: classref-property-setget

- void **set_use_render_direct_to_screen** **(** :ref:`bool<class_bool>` value **)**
- :ref:`bool<class_bool>` **is_using_render_direct_to_screen** **(** **)**

If ``true``, renders the Viewport directly to the screen instead of to the root viewport. Only available in GLES2. This is a low-level optimization and should not be used in most cases. If used, reading from the Viewport or from ``SCREEN_TEXTURE`` becomes unavailable. For more information see :ref:`VisualServer.viewport_set_render_direct_to_screen<class_VisualServer_method_viewport_set_render_direct_to_screen>`.

.. rst-class:: classref-item-separator

----

.. _class_Viewport_property_render_target_clear_mode:

.. rst-class:: classref-property

:ref:`ClearMode<enum_Viewport_ClearMode>` **render_target_clear_mode** = ``0``

.. rst-class:: classref-property-setget

- void **set_clear_mode** **(** :ref:`ClearMode<enum_Viewport_ClearMode>` value **)**
- :ref:`ClearMode<enum_Viewport_ClearMode>` **get_clear_mode** **(** **)**

The clear mode when viewport used as a render target.

\ **Note:** This property is intended for 2D usage.

.. rst-class:: classref-item-separator

----

.. _class_Viewport_property_render_target_update_mode:

.. rst-class:: classref-property

:ref:`UpdateMode<enum_Viewport_UpdateMode>` **render_target_update_mode** = ``2``

.. rst-class:: classref-property-setget

- void **set_update_mode** **(** :ref:`UpdateMode<enum_Viewport_UpdateMode>` value **)**
- :ref:`UpdateMode<enum_Viewport_UpdateMode>` **get_update_mode** **(** **)**

The update mode when viewport used as a render target.

.. rst-class:: classref-item-separator

----

.. _class_Viewport_property_render_target_v_flip:

.. rst-class:: classref-property

:ref:`bool<class_bool>` **render_target_v_flip** = ``false``

.. rst-class:: classref-property-setget

- void **set_vflip** **(** :ref:`bool<class_bool>` value **)**
- :ref:`bool<class_bool>` **get_vflip** **(** **)**

If ``true``, the result of rendering will be flipped vertically. Since Viewports in Redot 3.x render upside-down, it's recommended to set this to ``true`` in most situations.

.. rst-class:: classref-item-separator

----

.. _class_Viewport_property_shadow_atlas_quad_0:

.. rst-class:: classref-property

:ref:`ShadowAtlasQuadrantSubdiv<enum_Viewport_ShadowAtlasQuadrantSubdiv>` **shadow_atlas_quad_0** = ``2``

.. rst-class:: classref-property-setget

- void **set_shadow_atlas_quadrant_subdiv** **(** :ref:`int<class_int>` quadrant, :ref:`ShadowAtlasQuadrantSubdiv<enum_Viewport_ShadowAtlasQuadrantSubdiv>` subdiv **)**
- :ref:`ShadowAtlasQuadrantSubdiv<enum_Viewport_ShadowAtlasQuadrantSubdiv>` **get_shadow_atlas_quadrant_subdiv** **(** :ref:`int<class_int>` quadrant **)** |const|

The subdivision amount of the first quadrant on the shadow atlas.

.. rst-class:: classref-item-separator

----

.. _class_Viewport_property_shadow_atlas_quad_1:

.. rst-class:: classref-property

:ref:`ShadowAtlasQuadrantSubdiv<enum_Viewport_ShadowAtlasQuadrantSubdiv>` **shadow_atlas_quad_1** = ``2``

.. rst-class:: classref-property-setget

- void **set_shadow_atlas_quadrant_subdiv** **(** :ref:`int<class_int>` quadrant, :ref:`ShadowAtlasQuadrantSubdiv<enum_Viewport_ShadowAtlasQuadrantSubdiv>` subdiv **)**
- :ref:`ShadowAtlasQuadrantSubdiv<enum_Viewport_ShadowAtlasQuadrantSubdiv>` **get_shadow_atlas_quadrant_subdiv** **(** :ref:`int<class_int>` quadrant **)** |const|

The subdivision amount of the second quadrant on the shadow atlas.

.. rst-class:: classref-item-separator

----

.. _class_Viewport_property_shadow_atlas_quad_2:

.. rst-class:: classref-property

:ref:`ShadowAtlasQuadrantSubdiv<enum_Viewport_ShadowAtlasQuadrantSubdiv>` **shadow_atlas_quad_2** = ``3``

.. rst-class:: classref-property-setget

- void **set_shadow_atlas_quadrant_subdiv** **(** :ref:`int<class_int>` quadrant, :ref:`ShadowAtlasQuadrantSubdiv<enum_Viewport_ShadowAtlasQuadrantSubdiv>` subdiv **)**
- :ref:`ShadowAtlasQuadrantSubdiv<enum_Viewport_ShadowAtlasQuadrantSubdiv>` **get_shadow_atlas_quadrant_subdiv** **(** :ref:`int<class_int>` quadrant **)** |const|

The subdivision amount of the third quadrant on the shadow atlas.

.. rst-class:: classref-item-separator

----

.. _class_Viewport_property_shadow_atlas_quad_3:

.. rst-class:: classref-property

:ref:`ShadowAtlasQuadrantSubdiv<enum_Viewport_ShadowAtlasQuadrantSubdiv>` **shadow_atlas_quad_3** = ``4``

.. rst-class:: classref-property-setget

- void **set_shadow_atlas_quadrant_subdiv** **(** :ref:`int<class_int>` quadrant, :ref:`ShadowAtlasQuadrantSubdiv<enum_Viewport_ShadowAtlasQuadrantSubdiv>` subdiv **)**
- :ref:`ShadowAtlasQuadrantSubdiv<enum_Viewport_ShadowAtlasQuadrantSubdiv>` **get_shadow_atlas_quadrant_subdiv** **(** :ref:`int<class_int>` quadrant **)** |const|

The subdivision amount of the fourth quadrant on the shadow atlas.

.. rst-class:: classref-item-separator

----

.. _class_Viewport_property_shadow_atlas_size:

.. rst-class:: classref-property

:ref:`int<class_int>` **shadow_atlas_size** = ``0``

.. rst-class:: classref-property-setget

- void **set_shadow_atlas_size** **(** :ref:`int<class_int>` value **)**
- :ref:`int<class_int>` **get_shadow_atlas_size** **(** **)**

The shadow atlas' resolution (used for omni and spot lights). The value will be rounded up to the nearest power of 2.

\ **Note:** If this is set to ``0``, both point *and* directional shadows won't be visible. Since user-created viewports default to a value of ``0``, this value must be set above ``0`` manually (typically at least ``256``).

.. rst-class:: classref-item-separator

----

.. _class_Viewport_property_sharpen_intensity:

.. rst-class:: classref-property

:ref:`float<class_float>` **sharpen_intensity** = ``0.0``

.. rst-class:: classref-property-setget

- void **set_sharpen_intensity** **(** :ref:`float<class_float>` value **)**
- :ref:`float<class_float>` **get_sharpen_intensity** **(** **)**

If set to a value greater than ``0.0``, contrast-adaptive sharpening will be applied to the 3D viewport. This has a low performance cost and can be used to recover some of the sharpness lost from using FXAA. Values around ``0.5`` generally give the best results. See also :ref:`fxaa<class_Viewport_property_fxaa>`.

.. rst-class:: classref-item-separator

----

.. _class_Viewport_property_size:

.. rst-class:: classref-property

:ref:`Vector2<class_Vector2>` **size** = ``Vector2( 0, 0 )``

.. rst-class:: classref-property-setget

- void **set_size** **(** :ref:`Vector2<class_Vector2>` value **)**
- :ref:`Vector2<class_Vector2>` **get_size** **(** **)**

The width and height of viewport. Must be set to a value greater than or equal to 2 pixels on both dimensions. Otherwise, nothing will be displayed.

.. rst-class:: classref-item-separator

----

.. _class_Viewport_property_size_override_stretch:

.. rst-class:: classref-property

:ref:`bool<class_bool>` **size_override_stretch** = ``false``

.. rst-class:: classref-property-setget

- void **set_size_override_stretch** **(** :ref:`bool<class_bool>` value **)**
- :ref:`bool<class_bool>` **is_size_override_stretch_enabled** **(** **)**

If ``true``, the size override affects stretch as well.

.. rst-class:: classref-item-separator

----

.. _class_Viewport_property_transparent_bg:

.. rst-class:: classref-property

:ref:`bool<class_bool>` **transparent_bg** = ``false``

.. rst-class:: classref-property-setget

- void **set_transparent_background** **(** :ref:`bool<class_bool>` value **)**
- :ref:`bool<class_bool>` **has_transparent_background** **(** **)**

If ``true``, the viewport should render its background as transparent.

.. rst-class:: classref-item-separator

----

.. _class_Viewport_property_usage:

.. rst-class:: classref-property

:ref:`Usage<enum_Viewport_Usage>` **usage** = ``2``

.. rst-class:: classref-property-setget

- void **set_usage** **(** :ref:`Usage<enum_Viewport_Usage>` value **)**
- :ref:`Usage<enum_Viewport_Usage>` **get_usage** **(** **)**

The viewport's rendering mode. This controls which buffers are allocated for the viewport (2D only, or 2D + 3D). 2D-only options can reduce memory usage and improve performance slightly, especially on low-end devices.

\ **Note:** If set to :ref:`USAGE_2D<class_Viewport_constant_USAGE_2D>` or :ref:`USAGE_2D_NO_SAMPLING<class_Viewport_constant_USAGE_2D_NO_SAMPLING>`, :ref:`hdr<class_Viewport_property_hdr>` will have no effect when enabled since HDR is not supported for 2D.

.. rst-class:: classref-item-separator

----

.. _class_Viewport_property_use_32_bpc_depth:

.. rst-class:: classref-property

:ref:`bool<class_bool>` **use_32_bpc_depth** = ``false``

.. rst-class:: classref-property-setget

- void **set_use_32_bpc_depth** **(** :ref:`bool<class_bool>` value **)**
- :ref:`bool<class_bool>` **get_use_32_bpc_depth** **(** **)**

If ``true``, allocates the viewport's framebuffer with full floating-point precision (32-bit) instead of half floating-point precision (16-bit). Only effective when :ref:`hdr<class_Viewport_property_hdr>` is also enabled.

\ **Note:** Enabling this setting does not improve rendering quality. Using full floating-point precision is slower, and is generally only needed for advanced shaders that require a high level of precision. To reduce banding, enable :ref:`debanding<class_Viewport_property_debanding>` instead.

\ **Note:** Only available on the GLES3 backend.

.. rst-class:: classref-item-separator

----

.. _class_Viewport_property_world:

.. rst-class:: classref-property

:ref:`World<class_World>` **world**

.. rst-class:: classref-property-setget

- void **set_world** **(** :ref:`World<class_World>` value **)**
- :ref:`World<class_World>` **get_world** **(** **)**

The custom :ref:`World<class_World>` which can be used as 3D environment source.

.. rst-class:: classref-item-separator

----

.. _class_Viewport_property_world_2d:

.. rst-class:: classref-property

:ref:`World2D<class_World2D>` **world_2d**

.. rst-class:: classref-property-setget

- void **set_world_2d** **(** :ref:`World2D<class_World2D>` value **)**
- :ref:`World2D<class_World2D>` **get_world_2d** **(** **)**

The custom :ref:`World2D<class_World2D>` which can be used as 2D environment source.

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

Method Descriptions
-------------------

.. _class_Viewport_method_find_world:

.. rst-class:: classref-method

:ref:`World<class_World>` **find_world** **(** **)** |const|

Returns the first valid :ref:`World<class_World>` for this viewport, searching the :ref:`world<class_Viewport_property_world>` property of itself and any Viewport ancestor.

.. rst-class:: classref-item-separator

----

.. _class_Viewport_method_find_world_2d:

.. rst-class:: classref-method

:ref:`World2D<class_World2D>` **find_world_2d** **(** **)** |const|

Returns the first valid :ref:`World2D<class_World2D>` for this viewport, searching the :ref:`world_2d<class_Viewport_property_world_2d>` property of itself and any Viewport ancestor.

.. rst-class:: classref-item-separator

----

.. _class_Viewport_method_get_camera:

.. rst-class:: classref-method

:ref:`Camera<class_Camera>` **get_camera** **(** **)** |const|

Returns the active 3D camera.

.. rst-class:: classref-item-separator

----

.. _class_Viewport_method_get_final_transform:

.. rst-class:: classref-method

:ref:`Transform2D<class_Transform2D>` **get_final_transform** **(** **)** |const|

Returns the total transform of the viewport.

.. rst-class:: classref-item-separator

----

.. _class_Viewport_method_get_modal_stack_top:

.. rst-class:: classref-method

:ref:`Control<class_Control>` **get_modal_stack_top** **(** **)** |const|

Returns the topmost modal in the stack.

.. rst-class:: classref-item-separator

----

.. _class_Viewport_method_get_mouse_position:

.. rst-class:: classref-method

:ref:`Vector2<class_Vector2>` **get_mouse_position** **(** **)** |const|

Returns the mouse's position in this **Viewport** using the coordinate system of this **Viewport**.

.. rst-class:: classref-item-separator

----

.. _class_Viewport_method_get_render_info:

.. rst-class:: classref-method

:ref:`int<class_int>` **get_render_info** **(** :ref:`RenderInfo<enum_Viewport_RenderInfo>` info **)**

Returns information about the viewport from the rendering pipeline.

.. rst-class:: classref-item-separator

----

.. _class_Viewport_method_get_shadow_atlas_quadrant_subdiv:

.. rst-class:: classref-method

:ref:`ShadowAtlasQuadrantSubdiv<enum_Viewport_ShadowAtlasQuadrantSubdiv>` **get_shadow_atlas_quadrant_subdiv** **(** :ref:`int<class_int>` quadrant **)** |const|

Returns the :ref:`ShadowAtlasQuadrantSubdiv<enum_Viewport_ShadowAtlasQuadrantSubdiv>` of the specified quadrant.

.. rst-class:: classref-item-separator

----

.. _class_Viewport_method_get_size_override:

.. rst-class:: classref-method

:ref:`Vector2<class_Vector2>` **get_size_override** **(** **)** |const|

Returns the size override set with :ref:`set_size_override<class_Viewport_method_set_size_override>`.

.. rst-class:: classref-item-separator

----

.. _class_Viewport_method_get_texture:

.. rst-class:: classref-method

:ref:`ViewportTexture<class_ViewportTexture>` **get_texture** **(** **)** |const|

Returns the viewport's texture.

\ **Note:** Due to the way OpenGL works, the resulting :ref:`ViewportTexture<class_ViewportTexture>` is flipped vertically. You can use :ref:`Image.flip_y<class_Image_method_flip_y>` on the result of :ref:`Texture.get_data<class_Texture_method_get_data>` to flip it back, for example:

::

    var img = get_viewport().get_texture().get_data()
    img.flip_y()

.. rst-class:: classref-item-separator

----

.. _class_Viewport_method_get_viewport_rid:

.. rst-class:: classref-method

:ref:`RID<class_RID>` **get_viewport_rid** **(** **)** |const|

Returns the viewport's RID from the :ref:`VisualServer<class_VisualServer>`.

.. rst-class:: classref-item-separator

----

.. _class_Viewport_method_get_visible_rect:

.. rst-class:: classref-method

:ref:`Rect2<class_Rect2>` **get_visible_rect** **(** **)** |const|

Returns the visible rectangle in global screen coordinates.

.. rst-class:: classref-item-separator

----

.. _class_Viewport_method_gui_get_drag_data:

.. rst-class:: classref-method

:ref:`Variant<class_Variant>` **gui_get_drag_data** **(** **)** |const|

Returns the drag data from the GUI, that was previously returned by :ref:`Control.get_drag_data<class_Control_method_get_drag_data>`.

.. rst-class:: classref-item-separator

----

.. _class_Viewport_method_gui_has_modal_stack:

.. rst-class:: classref-method

:ref:`bool<class_bool>` **gui_has_modal_stack** **(** **)** |const|

Returns ``true`` if there are visible modals on-screen.

.. rst-class:: classref-item-separator

----

.. _class_Viewport_method_gui_is_drag_successful:

.. rst-class:: classref-method

:ref:`bool<class_bool>` **gui_is_drag_successful** **(** **)** |const|

Returns ``true`` if the drag operation is successful.

.. rst-class:: classref-item-separator

----

.. _class_Viewport_method_gui_is_dragging:

.. rst-class:: classref-method

:ref:`bool<class_bool>` **gui_is_dragging** **(** **)** |const|

Returns ``true`` if the viewport is currently performing a drag operation.

Alternative to :ref:`Node.NOTIFICATION_DRAG_BEGIN<class_Node_constant_NOTIFICATION_DRAG_BEGIN>` and :ref:`Node.NOTIFICATION_DRAG_END<class_Node_constant_NOTIFICATION_DRAG_END>` when you prefer polling the value.

.. rst-class:: classref-item-separator

----

.. _class_Viewport_method_input:

.. rst-class:: classref-method

void **input** **(** :ref:`InputEvent<class_InputEvent>` local_event **)**

.. container:: contribute

	There is currently no description for this method. Please help us by :ref:`contributing one <doc_updating_the_class_reference>`!

.. rst-class:: classref-item-separator

----

.. _class_Viewport_method_is_input_handled:

.. rst-class:: classref-method

:ref:`bool<class_bool>` **is_input_handled** **(** **)** |const|

.. container:: contribute

	There is currently no description for this method. Please help us by :ref:`contributing one <doc_updating_the_class_reference>`!

.. rst-class:: classref-item-separator

----

.. _class_Viewport_method_is_size_override_enabled:

.. rst-class:: classref-method

:ref:`bool<class_bool>` **is_size_override_enabled** **(** **)** |const|

Returns ``true`` if the size override is enabled. See :ref:`set_size_override<class_Viewport_method_set_size_override>`.

.. rst-class:: classref-item-separator

----

.. _class_Viewport_method_set_attach_to_screen_rect:

.. rst-class:: classref-method

void **set_attach_to_screen_rect** **(** :ref:`Rect2<class_Rect2>` rect **)**

Attaches this **Viewport** to the root **Viewport** with the specified rectangle. This bypasses the need for another node to display this **Viewport** but makes you responsible for updating the position of this **Viewport** manually.

.. rst-class:: classref-item-separator

----

.. _class_Viewport_method_set_input_as_handled:

.. rst-class:: classref-method

void **set_input_as_handled** **(** **)**

Stops the input from propagating further down the :ref:`SceneTree<class_SceneTree>`.

.. rst-class:: classref-item-separator

----

.. _class_Viewport_method_set_shadow_atlas_quadrant_subdiv:

.. rst-class:: classref-method

void **set_shadow_atlas_quadrant_subdiv** **(** :ref:`int<class_int>` quadrant, :ref:`ShadowAtlasQuadrantSubdiv<enum_Viewport_ShadowAtlasQuadrantSubdiv>` subdiv **)**

Sets the number of subdivisions to use in the specified quadrant. A higher number of subdivisions allows you to have more shadows in the scene at once, but reduces the quality of the shadows. A good practice is to have quadrants with a varying number of subdivisions and to have as few subdivisions as possible.

.. rst-class:: classref-item-separator

----

.. _class_Viewport_method_set_size_override:

.. rst-class:: classref-method

void **set_size_override** **(** :ref:`bool<class_bool>` enable, :ref:`Vector2<class_Vector2>` size=Vector2( -1, -1 ), :ref:`Vector2<class_Vector2>` margin=Vector2( 0, 0 ) **)**

Sets the size override of the viewport. If the ``enable`` parameter is ``true`` the override is used, otherwise it uses the default size. If the size parameter is ``(-1, -1)``, it won't update the size.

.. rst-class:: classref-item-separator

----

.. _class_Viewport_method_unhandled_input:

.. rst-class:: classref-method

void **unhandled_input** **(** :ref:`InputEvent<class_InputEvent>` local_event **)**

.. container:: contribute

	There is currently no description for this method. Please help us by :ref:`contributing one <doc_updating_the_class_reference>`!

.. rst-class:: classref-item-separator

----

.. _class_Viewport_method_update_worlds:

.. rst-class:: classref-method

void **update_worlds** **(** **)**

Forces update of the 2D and 3D worlds.

.. rst-class:: classref-item-separator

----

.. _class_Viewport_method_warp_mouse:

.. rst-class:: classref-method

void **warp_mouse** **(** :ref:`Vector2<class_Vector2>` to_position **)**

Moves the mouse pointer to the specified position in this **Viewport** using the coordinate system of this **Viewport**.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
.. |static| replace:: :abbr:`static (This method doesn't need an instance to be called, so it can be called directly using the class name.)`
