:github_url: hide

.. DO NOT EDIT THIS FILE!!!
.. Generated automatically from Redot engine sources.
.. Generator: https://github.com/redot-engine/redot/tree/3.6/doc/tools/make_rst.py.
.. XML source: https://github.com/redot-engine/redot/tree/3.6/doc/classes/VisualShaderNodeScalarUniform.xml.

.. _class_VisualShaderNodeScalarUniform:

VisualShaderNodeScalarUniform
=============================

**Inherits:** :ref:`VisualShaderNodeUniform<class_VisualShaderNodeUniform>` **<** :ref:`VisualShaderNode<class_VisualShaderNode>` **<** :ref:`Resource<class_Resource>` **<** :ref:`Reference<class_Reference>` **<** :ref:`Object<class_Object>`

.. container:: contribute

	There is currently no description for this class. Please help us by :ref:`contributing one <doc_updating_the_class_reference>`!

.. rst-class:: classref-reftable-group

Properties
----------

.. table::
   :widths: auto

   +------------------------------------------------------+--------------------------------------------------------------------------------------------------+-----------+
   | :ref:`float<class_float>`                            | :ref:`default_value<class_VisualShaderNodeScalarUniform_property_default_value>`                 | ``0.0``   |
   +------------------------------------------------------+--------------------------------------------------------------------------------------------------+-----------+
   | :ref:`bool<class_bool>`                              | :ref:`default_value_enabled<class_VisualShaderNodeScalarUniform_property_default_value_enabled>` | ``false`` |
   +------------------------------------------------------+--------------------------------------------------------------------------------------------------+-----------+
   | :ref:`Hint<enum_VisualShaderNodeScalarUniform_Hint>` | :ref:`hint<class_VisualShaderNodeScalarUniform_property_hint>`                                   | ``0``     |
   +------------------------------------------------------+--------------------------------------------------------------------------------------------------+-----------+
   | :ref:`float<class_float>`                            | :ref:`max<class_VisualShaderNodeScalarUniform_property_max>`                                     | ``1.0``   |
   +------------------------------------------------------+--------------------------------------------------------------------------------------------------+-----------+
   | :ref:`float<class_float>`                            | :ref:`min<class_VisualShaderNodeScalarUniform_property_min>`                                     | ``0.0``   |
   +------------------------------------------------------+--------------------------------------------------------------------------------------------------+-----------+
   | :ref:`float<class_float>`                            | :ref:`step<class_VisualShaderNodeScalarUniform_property_step>`                                   | ``0.1``   |
   +------------------------------------------------------+--------------------------------------------------------------------------------------------------+-----------+

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

Enumerations
------------

.. _enum_VisualShaderNodeScalarUniform_Hint:

.. rst-class:: classref-enumeration

enum **Hint**:

.. _class_VisualShaderNodeScalarUniform_constant_HINT_NONE:

.. rst-class:: classref-enumeration-constant

:ref:`Hint<enum_VisualShaderNodeScalarUniform_Hint>` **HINT_NONE** = ``0``

No hint used.

.. _class_VisualShaderNodeScalarUniform_constant_HINT_RANGE:

.. rst-class:: classref-enumeration-constant

:ref:`Hint<enum_VisualShaderNodeScalarUniform_Hint>` **HINT_RANGE** = ``1``

A range hint for scalar value, which limits possible input values between :ref:`min<class_VisualShaderNodeScalarUniform_property_min>` and :ref:`max<class_VisualShaderNodeScalarUniform_property_max>`. Translated to ``hint_range(min, max)`` in shader code.

.. _class_VisualShaderNodeScalarUniform_constant_HINT_RANGE_STEP:

.. rst-class:: classref-enumeration-constant

:ref:`Hint<enum_VisualShaderNodeScalarUniform_Hint>` **HINT_RANGE_STEP** = ``2``

A range hint for scalar value with step, which limits possible input values between :ref:`min<class_VisualShaderNodeScalarUniform_property_min>` and :ref:`max<class_VisualShaderNodeScalarUniform_property_max>`, with a step (increment) of :ref:`step<class_VisualShaderNodeScalarUniform_property_step>`). Translated to ``hint_range(min, max, step)`` in shader code.

.. _class_VisualShaderNodeScalarUniform_constant_HINT_MAX:

.. rst-class:: classref-enumeration-constant

:ref:`Hint<enum_VisualShaderNodeScalarUniform_Hint>` **HINT_MAX** = ``3``

Represents the size of the :ref:`Hint<enum_VisualShaderNodeScalarUniform_Hint>` enum.

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

Property Descriptions
---------------------

.. _class_VisualShaderNodeScalarUniform_property_default_value:

.. rst-class:: classref-property

:ref:`float<class_float>` **default_value** = ``0.0``

.. rst-class:: classref-property-setget

- void **set_default_value** **(** :ref:`float<class_float>` value **)**
- :ref:`float<class_float>` **get_default_value** **(** **)**

A default value to be assigned within the shader.

.. rst-class:: classref-item-separator

----

.. _class_VisualShaderNodeScalarUniform_property_default_value_enabled:

.. rst-class:: classref-property

:ref:`bool<class_bool>` **default_value_enabled** = ``false``

.. rst-class:: classref-property-setget

- void **set_default_value_enabled** **(** :ref:`bool<class_bool>` value **)**
- :ref:`bool<class_bool>` **is_default_value_enabled** **(** **)**

Enables usage of the :ref:`default_value<class_VisualShaderNodeScalarUniform_property_default_value>`.

.. rst-class:: classref-item-separator

----

.. _class_VisualShaderNodeScalarUniform_property_hint:

.. rst-class:: classref-property

:ref:`Hint<enum_VisualShaderNodeScalarUniform_Hint>` **hint** = ``0``

.. rst-class:: classref-property-setget

- void **set_hint** **(** :ref:`Hint<enum_VisualShaderNodeScalarUniform_Hint>` value **)**
- :ref:`Hint<enum_VisualShaderNodeScalarUniform_Hint>` **get_hint** **(** **)**

A hint applied to the uniform, which controls the values it can take when set through the inspector.

.. rst-class:: classref-item-separator

----

.. _class_VisualShaderNodeScalarUniform_property_max:

.. rst-class:: classref-property

:ref:`float<class_float>` **max** = ``1.0``

.. rst-class:: classref-property-setget

- void **set_max** **(** :ref:`float<class_float>` value **)**
- :ref:`float<class_float>` **get_max** **(** **)**

Minimum value for range hints. Used if :ref:`hint<class_VisualShaderNodeScalarUniform_property_hint>` is set to :ref:`HINT_RANGE<class_VisualShaderNodeScalarUniform_constant_HINT_RANGE>` or :ref:`HINT_RANGE_STEP<class_VisualShaderNodeScalarUniform_constant_HINT_RANGE_STEP>`.

.. rst-class:: classref-item-separator

----

.. _class_VisualShaderNodeScalarUniform_property_min:

.. rst-class:: classref-property

:ref:`float<class_float>` **min** = ``0.0``

.. rst-class:: classref-property-setget

- void **set_min** **(** :ref:`float<class_float>` value **)**
- :ref:`float<class_float>` **get_min** **(** **)**

Maximum value for range hints. Used if :ref:`hint<class_VisualShaderNodeScalarUniform_property_hint>` is set to :ref:`HINT_RANGE<class_VisualShaderNodeScalarUniform_constant_HINT_RANGE>` or :ref:`HINT_RANGE_STEP<class_VisualShaderNodeScalarUniform_constant_HINT_RANGE_STEP>`.

.. rst-class:: classref-item-separator

----

.. _class_VisualShaderNodeScalarUniform_property_step:

.. rst-class:: classref-property

:ref:`float<class_float>` **step** = ``0.1``

.. rst-class:: classref-property-setget

- void **set_step** **(** :ref:`float<class_float>` value **)**
- :ref:`float<class_float>` **get_step** **(** **)**

Step (increment) value for the range hint with step. Used if :ref:`hint<class_VisualShaderNodeScalarUniform_property_hint>` is set to :ref:`HINT_RANGE_STEP<class_VisualShaderNodeScalarUniform_constant_HINT_RANGE_STEP>`.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
.. |static| replace:: :abbr:`static (This method doesn't need an instance to be called, so it can be called directly using the class name.)`
